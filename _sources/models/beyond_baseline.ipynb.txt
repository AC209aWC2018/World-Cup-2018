{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modeling with Feature Engineered Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.linear_model import LogisticRegressionCV, LogisticRegression\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n",
    "from predict_test_data import predict_test_data\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import LabelBinarizer\n",
    "from sklearn.cross_decomposition import PLSRegression\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import itertools\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "%matplotlib inline\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv('../data/cleaned/train_final.csv')\n",
    "test = pd.read_csv('../data/cleaned/test_final.csv')\n",
    "wc_playoffs_train = pd.read_csv('../data/cleaned/wc_playoffs_final.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To begin, let's just naively use all the features we have feature engineered."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "columns = ['overall_diff', 'attack_away_defence_home_diff', 'attack_diff',\n",
    "           'attack_home_defence_away_diff', 'defence_diff', 'midfield_diff',\n",
    "           'prestige_diff', 'growth_diff', 'full_age_diff',\n",
    "           'start_age_diff', 'value_euros_millions_diff',\n",
    "           'wage_euros_thousands_diff', 'goalkeeper_overall_diff',\n",
    "           'bup_dribbling_diff', 'bup_passing_diff', 'bup_speed_diff',\n",
    "           'cc_crossing_diff', 'cc_passing_diff', 'cc_shooting_diff',\n",
    "           'd_aggresion_diff', 'd_pressure_diff', 'd_width_diff', \n",
    "           'gdp_diff', 'is_home', 'raw_gdp_diff', \n",
    "           'win_momentum_past_1_games_diff', 'lose_momentum_past_1_games_diff',\n",
    "           'win_momentum_past_2_games_diff', 'lose_momentum_past_2_games_diff',\n",
    "           'win_momentum_past_3_games_diff', 'lose_momentum_past_3_games_diff',\n",
    "           'win_momentum_past_4_games_diff', 'lose_momentum_past_4_games_diff',\n",
    "           'win_momentum_past_5_games_diff', 'lose_momentum_past_5_games_diff',\n",
    "           \n",
    "]\n",
    "\n",
    "train = train[columns + ['home_win']]\n",
    "test = test[columns  + ['home_win', 'home_win_no_pk']]\n",
    "wc_train = wc_playoffs_train[columns + ['home_win']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Same seed as baseline to ensure same train and validation sets so that comparisons are valid.\n",
    "np.random.seed(14)\n",
    "X_train, X_valid = train_test_split(train, test_size = 0.2)\n",
    "y_train = X_train['home_win'].ravel()\n",
    "X_train = X_train.drop(['home_win'], axis = 1)\n",
    "y_valid= X_valid['home_win'].ravel()\n",
    "X_valid = X_valid.drop(['home_win'], axis = 1)\n",
    "y_test = test['home_win'].ravel()\n",
    "y_test_no_pk = test['home_win_no_pk'].ravel()\n",
    "X_test = test.drop(['home_win', 'home_win_no_pk'], axis = 1)\n",
    "y_wc = wc_train['home_win'].ravel()\n",
    "X_wc = wc_train.drop(['home_win'], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fitting the Models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similar to before, we will fit different classification models on our data and select the one with the best validation accuracy. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "score = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression Train Score: 0.5069215557020436\n",
      "Logistic Regression Validation Score: 0.5368421052631579\n"
     ]
    }
   ],
   "source": [
    "lr_model = LogisticRegressionCV(solver = 'lbfgs', max_iter = 5000, cv = 5, multi_class='multinomial').fit(X_train, y_train)\n",
    "score[\"Logistic Regression\"] = {}\n",
    "score[\"Logistic Regression\"][\"model\"] = lr_model\n",
    "score[\"Logistic Regression\"][\"Train Score\"] = lr_model.score(X_train, y_train)\n",
    "score[\"Logistic Regression\"][\"Validation Score\"] = lr_model.score(X_valid, y_valid)\n",
    "\n",
    "print(\"Logistic Regression Train Score: {}\".format(score[\"Logistic Regression\"][\"Train Score\"]))\n",
    "print(\"Logistic Regression Validation Score: {}\".format(score[\"Logistic Regression\"][\"Validation Score\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Like before, we first check whether the variances across the three outcomes are equal, and they do seem quite equal.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall_diff</th>\n",
       "      <th>attack_away_defence_home_diff</th>\n",
       "      <th>attack_diff</th>\n",
       "      <th>attack_home_defence_away_diff</th>\n",
       "      <th>defence_diff</th>\n",
       "      <th>midfield_diff</th>\n",
       "      <th>prestige_diff</th>\n",
       "      <th>growth_diff</th>\n",
       "      <th>full_age_diff</th>\n",
       "      <th>start_age_diff</th>\n",
       "      <th>...</th>\n",
       "      <th>win_momentum_past_1_games_diff</th>\n",
       "      <th>lose_momentum_past_1_games_diff</th>\n",
       "      <th>win_momentum_past_2_games_diff</th>\n",
       "      <th>lose_momentum_past_2_games_diff</th>\n",
       "      <th>win_momentum_past_3_games_diff</th>\n",
       "      <th>lose_momentum_past_3_games_diff</th>\n",
       "      <th>win_momentum_past_4_games_diff</th>\n",
       "      <th>lose_momentum_past_4_games_diff</th>\n",
       "      <th>win_momentum_past_5_games_diff</th>\n",
       "      <th>lose_momentum_past_5_games_diff</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>home_win</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>-1</th>\n",
       "      <td>31.393396</td>\n",
       "      <td>38.015113</td>\n",
       "      <td>40.858572</td>\n",
       "      <td>41.497639</td>\n",
       "      <td>37.554931</td>\n",
       "      <td>38.133908</td>\n",
       "      <td>25.423806</td>\n",
       "      <td>2.770866</td>\n",
       "      <td>2.489490</td>\n",
       "      <td>4.552043</td>\n",
       "      <td>...</td>\n",
       "      <td>0.294715</td>\n",
       "      <td>0.028413</td>\n",
       "      <td>0.582006</td>\n",
       "      <td>0.055080</td>\n",
       "      <td>0.838886</td>\n",
       "      <td>0.080313</td>\n",
       "      <td>1.163321</td>\n",
       "      <td>0.113674</td>\n",
       "      <td>1.431640</td>\n",
       "      <td>0.143578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>36.158215</td>\n",
       "      <td>46.202150</td>\n",
       "      <td>47.654088</td>\n",
       "      <td>46.137393</td>\n",
       "      <td>43.559341</td>\n",
       "      <td>41.798216</td>\n",
       "      <td>30.781631</td>\n",
       "      <td>2.593080</td>\n",
       "      <td>2.596855</td>\n",
       "      <td>4.532752</td>\n",
       "      <td>...</td>\n",
       "      <td>0.271093</td>\n",
       "      <td>0.028312</td>\n",
       "      <td>0.523516</td>\n",
       "      <td>0.054950</td>\n",
       "      <td>0.808391</td>\n",
       "      <td>0.087430</td>\n",
       "      <td>1.049194</td>\n",
       "      <td>0.111427</td>\n",
       "      <td>1.315560</td>\n",
       "      <td>0.141014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37.105145</td>\n",
       "      <td>47.913430</td>\n",
       "      <td>49.295727</td>\n",
       "      <td>45.265228</td>\n",
       "      <td>43.509512</td>\n",
       "      <td>42.634416</td>\n",
       "      <td>26.985673</td>\n",
       "      <td>2.953428</td>\n",
       "      <td>2.406626</td>\n",
       "      <td>4.359358</td>\n",
       "      <td>...</td>\n",
       "      <td>0.248230</td>\n",
       "      <td>0.026205</td>\n",
       "      <td>0.465120</td>\n",
       "      <td>0.049671</td>\n",
       "      <td>0.717445</td>\n",
       "      <td>0.076786</td>\n",
       "      <td>1.023086</td>\n",
       "      <td>0.111290</td>\n",
       "      <td>1.291213</td>\n",
       "      <td>0.144669</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          overall_diff  attack_away_defence_home_diff  attack_diff  \\\n",
       "home_win                                                             \n",
       "-1           31.393396                      38.015113    40.858572   \n",
       " 0           36.158215                      46.202150    47.654088   \n",
       " 1           37.105145                      47.913430    49.295727   \n",
       "\n",
       "          attack_home_defence_away_diff  defence_diff  midfield_diff  \\\n",
       "home_win                                                               \n",
       "-1                            41.497639     37.554931      38.133908   \n",
       " 0                            46.137393     43.559341      41.798216   \n",
       " 1                            45.265228     43.509512      42.634416   \n",
       "\n",
       "          prestige_diff  growth_diff  full_age_diff  start_age_diff  \\\n",
       "home_win                                                              \n",
       "-1            25.423806     2.770866       2.489490        4.552043   \n",
       " 0            30.781631     2.593080       2.596855        4.532752   \n",
       " 1            26.985673     2.953428       2.406626        4.359358   \n",
       "\n",
       "                       ...                 win_momentum_past_1_games_diff  \\\n",
       "home_win               ...                                                  \n",
       "-1                     ...                                       0.294715   \n",
       " 0                     ...                                       0.271093   \n",
       " 1                     ...                                       0.248230   \n",
       "\n",
       "          lose_momentum_past_1_games_diff  win_momentum_past_2_games_diff  \\\n",
       "home_win                                                                    \n",
       "-1                               0.028413                        0.582006   \n",
       " 0                               0.028312                        0.523516   \n",
       " 1                               0.026205                        0.465120   \n",
       "\n",
       "          lose_momentum_past_2_games_diff  win_momentum_past_3_games_diff  \\\n",
       "home_win                                                                    \n",
       "-1                               0.055080                        0.838886   \n",
       " 0                               0.054950                        0.808391   \n",
       " 1                               0.049671                        0.717445   \n",
       "\n",
       "          lose_momentum_past_3_games_diff  win_momentum_past_4_games_diff  \\\n",
       "home_win                                                                    \n",
       "-1                               0.080313                        1.163321   \n",
       " 0                               0.087430                        1.049194   \n",
       " 1                               0.076786                        1.023086   \n",
       "\n",
       "          lose_momentum_past_4_games_diff  win_momentum_past_5_games_diff  \\\n",
       "home_win                                                                    \n",
       "-1                               0.113674                        1.431640   \n",
       " 0                               0.111427                        1.315560   \n",
       " 1                               0.111290                        1.291213   \n",
       "\n",
       "          lose_momentum_past_5_games_diff  \n",
       "home_win                                   \n",
       "-1                               0.143578  \n",
       " 0                               0.141014  \n",
       " 1                               0.144669  \n",
       "\n",
       "[3 rows x 35 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.groupby('home_win').var()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "lda_model = LinearDiscriminantAnalysis().fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LDA Train Score: 0.5247198417930126\n",
      "LDA Validation Score: 0.5473684210526316\n"
     ]
    }
   ],
   "source": [
    "score[\"LDA\"] = {}\n",
    "score[\"LDA\"][\"model\"] = lda_model\n",
    "score[\"LDA\"][\"Train Score\"] = lda_model.score(X_train, y_train)\n",
    "score[\"LDA\"][\"Validation Score\"] = lda_model.score(X_valid, y_valid)\n",
    "print(\"LDA Train Score: {}\".format(score[\"LDA\"][\"Train Score\"]))\n",
    "print(\"LDA Validation Score: {}\".format(score[\"LDA\"][\"Validation Score\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Likewise, we try out QDA as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "qda_model = QuadraticDiscriminantAnalysis().fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "QDA Train Score: 0.4963744232036915\n",
      "QDA Validation Score: 0.45263157894736844\n"
     ]
    }
   ],
   "source": [
    "score[\"QDA\"] = {}\n",
    "score[\"QDA\"]['model'] = qda_model\n",
    "score[\"QDA\"][\"Train Score\"] = qda_model.score(X_train, y_train)\n",
    "score[\"QDA\"][\"Validation Score\"] = qda_model.score(X_valid, y_valid)\n",
    "print(\"QDA Train Score: {}\".format(score[\"QDA\"][\"Train Score\"]))\n",
    "print(\"QDA Validation Score: {}\".format(score[\"QDA\"][\"Validation Score\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will also try out Random Forest."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf_params = {'bootstrap': [True, False],\n",
    "             'max_depth': [3, 5, 10, 20, 30, 40, None],\n",
    "             'max_features': ['auto', 'sqrt'],\n",
    "             'min_samples_leaf': [1, 2, 4, 10, 20],\n",
    "             'min_samples_split': [2, 5, 10],\n",
    "             'n_estimators': [10, 50, 100, 200, 500]}\n",
    "\n",
    "rf_model = RandomizedSearchCV(estimator=RandomForestClassifier(), param_distributions=rf_params,\\\n",
    "                                   n_iter=50, scoring='accuracy', n_jobs=-1, cv=5, verbose=0).fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest Train Score: 0.5972313777191826\n",
      "Random Forest Validation Score 0.5342105263157895\n"
     ]
    }
   ],
   "source": [
    "score[\"Random Forest\"] = {}\n",
    "score[\"Random Forest\"]['model'] = rf_model\n",
    "score[\"Random Forest\"][\"Train Score\"] = rf_model.score(X_train, y_train)\n",
    "score[\"Random Forest\"][\"Validation Score\"] = rf_model.score(X_valid, y_valid)\n",
    "print(\"Random Forest Train Score: {}\".format(score[\"Random Forest\"][\"Train Score\"]))\n",
    "print(\"Random Forest Validation Score {}\".format(score[\"Random Forest\"][\"Validation Score\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, XGBoost."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "xgb_params = {\n",
    "    'min_child_weight': [1, 5, 10],\n",
    "    'gamma': [0.5, 1, 1.5, 2, 5],\n",
    "    'subsample': [0.6, 0.8, 1.0],\n",
    "    'colsample_bytree': [0.6, 0.8, 1.0],\n",
    "    'max_depth': [3, 4, 5]\n",
    "    }\n",
    "xgb_model = RandomizedSearchCV(estimator=XGBClassifier(objective='multi:softmax', num_class = 3), param_distributions=xgb_params,\\\n",
    "                                   n_iter=50, scoring='accuracy', n_jobs=-1, cv=5, verbose=0).fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost Train Score: 0.5411997363216875\n",
      "XGBoost Validation Score 0.5394736842105263\n"
     ]
    }
   ],
   "source": [
    "score[\"XGBoost\"] = {}\n",
    "score[\"XGBoost\"]['model'] = xgb_model\n",
    "score[\"XGBoost\"][\"Train Score\"] = xgb_model.score(X_train, y_train)\n",
    "score[\"XGBoost\"][\"Validation Score\"] = xgb_model.score(X_valid, y_valid)\n",
    "print(\"XGBoost Train Score: {}\".format(score[\"XGBoost\"][\"Train Score\"]))\n",
    "print(\"XGBoost Validation Score {}\".format(score[\"XGBoost\"][\"Validation Score\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Train Score</th>\n",
       "      <th>Validation Score</th>\n",
       "      <th>model</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Logistic Regression</th>\n",
       "      <td>0.506922</td>\n",
       "      <td>0.536842</td>\n",
       "      <td>LogisticRegressionCV(Cs=10, class_weight=None,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LDA</th>\n",
       "      <td>0.52472</td>\n",
       "      <td>0.547368</td>\n",
       "      <td>LinearDiscriminantAnalysis(n_components=None, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>QDA</th>\n",
       "      <td>0.496374</td>\n",
       "      <td>0.452632</td>\n",
       "      <td>QuadraticDiscriminantAnalysis(priors=None, reg...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Random Forest</th>\n",
       "      <td>0.597231</td>\n",
       "      <td>0.534211</td>\n",
       "      <td>RandomizedSearchCV(cv=5, error_score='raise-de...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>XGBoost</th>\n",
       "      <td>0.5412</td>\n",
       "      <td>0.539474</td>\n",
       "      <td>RandomizedSearchCV(cv=5, error_score='raise-de...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Train Score Validation Score  \\\n",
       "Logistic Regression    0.506922         0.536842   \n",
       "LDA                     0.52472         0.547368   \n",
       "QDA                    0.496374         0.452632   \n",
       "Random Forest          0.597231         0.534211   \n",
       "XGBoost                  0.5412         0.539474   \n",
       "\n",
       "                                                                 model  \n",
       "Logistic Regression  LogisticRegressionCV(Cs=10, class_weight=None,...  \n",
       "LDA                  LinearDiscriminantAnalysis(n_components=None, ...  \n",
       "QDA                  QuadraticDiscriminantAnalysis(priors=None, reg...  \n",
       "Random Forest        RandomizedSearchCV(cv=5, error_score='raise-de...  \n",
       "XGBoost              RandomizedSearchCV(cv=5, error_score='raise-de...  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_result = pd.DataFrame(score).T\n",
    "df_result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We choose the final model to be the one with the highest validation score, which is LDA in this case\n"
     ]
    }
   ],
   "source": [
    "model_name = df_result['Validation Score'].astype(float).argmax()\n",
    "print(\"We choose the final model to be the one with the highest validation score,\\\n",
    " which is {} in this case\".format(model_name))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now to predict the test set. Similar to before, we will use three different approaches. For the WC Playoff Model approach, we will still use logistic regression for now. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For the best Model, LDA, the test accuracy is 0.640625 at 90 mins\n",
      "For the best Model, LDA, the test accuracy is 0.671875 at end (Softmax)\n",
      "For the best Model, LDA, the test accuracy is 0.65625 at end (WC Playoff Model)\n"
     ]
    }
   ],
   "source": [
    "wc_model = LogisticRegressionCV(solver = 'lbfgs', max_iter = 5000, cv = 5, multi_class='multinomial').fit(X_wc, y_wc)\n",
    "test_pred = predict_test_data(X_test, df_result.loc[model_name].model)\n",
    "test_pred_playoff = predict_test_data(X_test, df_result.loc[model_name].model, False, wc_model)\n",
    "test_score = accuracy_score(y_test, test_pred)\n",
    "test_score_playoff = accuracy_score(y_test, test_pred_playoff)\n",
    "test_score_no_pk = df_result.loc[model_name].model.score(X_test, y_test_no_pk)\n",
    "print(\"For the best Model, {}, the test accuracy is {} at 90 mins\".format(model_name, test_score_no_pk))\n",
    "print(\"For the best Model, {}, the test accuracy is {} at end (Softmax)\".format(model_name, test_score))\n",
    "print(\"For the best Model, {}, the test accuracy is {} at end (WC Playoff Model)\".format(model_name, test_score_playoff))\n",
    "\n",
    "final_models_score = {}\n",
    "final_models_score[model_name] = {}\n",
    "final_models_score[model_name][\"Train Score\"] = df_result.loc[model_name]['Train Score']\n",
    "final_models_score[model_name][\"Validation Score\"] = df_result.loc[model_name]['Validation Score']\n",
    "final_models_score[model_name][\"Test Score (90 mins)\"] = test_score_no_pk\n",
    "final_models_score[model_name][\"Test Score (Softmax)\"] = test_score\n",
    "final_models_score[model_name][\"Test Score (WC Playoff Model)\"] = test_score_playoff"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Wow! It seems that our model with all the features is a decent improvement to the baseline model for the test set in all three approaches. However, the lower train and validation scores in general is a bit concerning. \n",
    "\n",
    "Like before, random forest seems to perform similarly to the best model, so we will utilize its feature importance again. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "feature_importances = rf_model.best_estimator_.feature_importances_\n",
    "plt.figure(figsize =(12, 6))\n",
    "indices = np.argsort(feature_importances)[::-1]\n",
    "plt.title(\"RF Feature Importances\")\n",
    "plt.bar(range(len(columns)), feature_importances[indices],\n",
    "       color=\"r\", align=\"center\")\n",
    "plt.xticks(range(len(columns)), np.array(columns)[indices], rotation = 90)\n",
    "plt.ylabel('Feature Importances')\n",
    "plt.xlim([-1, len(columns)]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Like before, the ratings of the team are pretty important features. Many of the features we have engineered seem to be decent features as well, which should not be surprising from the EDA. Besides 3 of them, many of the momentum features are near the bottom, and this might be due to the fact that these momentum features are obviously highly correlated with each other, and this may be causing the lower train and validation scores. Many of the features in our feature are highly correlated; we would want to deal with this multicollinearity somehow to see if we can achieve better results. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stacking"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We saw that our models in general performed similarly in terms of train/validation. Why not try stacking the models together? We will stack the logistic regression, LDA, QDA, Random Forest, and XGBoost models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fit_stack_model(models, X_train, y_train): \n",
    "    predictions = []\n",
    "    for model in models:\n",
    "        predictions.append(model.predict(X_train))\n",
    "        \n",
    "    predictions = np.array(predictions).T\n",
    "    logit = LogisticRegression(C=1000).fit(predictions, y_train)\n",
    "    return logit\n",
    "    \n",
    "def stack_model_predict(models, stack_model, X, test = False):\n",
    "    predictions = []\n",
    "    for model in models:\n",
    "        predictions.append(model.predict(X))        \n",
    "    predictions = np.array(predictions).T\n",
    "    if not test:\n",
    "        return stack_model.predict(predictions)\n",
    "    else:\n",
    "        return stack_model.predict_proba(predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stacking Model Train Score: 0.5662491760052736\n",
      "Stacking Model Validation Score: 0.5368421052631579\n"
     ]
    }
   ],
   "source": [
    "models = df_result['model']\n",
    "stack_model = fit_stack_model(models, X_train, y_train)\n",
    "print(\"Stacking Model Train Score: {}\".format(accuracy_score(y_train, stack_model_predict(models, stack_model,\n",
    "                                                                                         X_train))))\n",
    "print(\"Stacking Model Validation Score: {}\".format(accuracy_score(y_valid, stack_model_predict(models, stack_model,\n",
    "                                                                                         X_valid))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stacking Model Test Score at 90 mins: 0.609375\n",
      "Stacking Model Test Score at end (Softmax): 0.625\n",
      "Stacking Model Test Score at end (WC Playoff Model): 0.640625\n"
     ]
    }
   ],
   "source": [
    "stack_model_test_pred_prob = stack_model_predict(models, stack_model, X_test, True)\n",
    "stack_model_test_pred = [np.where(np.argsort(val) == 1)[0][0]-1 if (i >= 48) & (np.argmax(val) == 1)\n",
    "                       else np.argmax(val)-1 for i, val in enumerate(stack_model_test_pred_prob)]\n",
    "stack_model_test_pred_wc_model = [np.argmax(val) - 1 for val in stack_model_test_pred_prob[:48]] +\\\n",
    "                                list(wc_model.predict(X_test[48:]))\n",
    "                                    \n",
    "\n",
    "stack_model_test_acc = accuracy_score(y_test, stack_model_test_pred)\n",
    "stack_model_test_acc_no_pk = accuracy_score(y_test_no_pk, stack_model_predict(models, stack_model, X_test))\n",
    "stack_model_test_acc_wc_model = accuracy_score(y_test, stack_model_test_pred_wc_model)\n",
    "\n",
    "\n",
    "print(\"Stacking Model Test Score at 90 mins: {}\".format(stack_model_test_acc_no_pk))\n",
    "print(\"Stacking Model Test Score at end (Softmax): {}\".format(stack_model_test_acc))\n",
    "print(\"Stacking Model Test Score at end (WC Playoff Model): {}\".format(stack_model_test_acc_wc_model))\n",
    "\n",
    "final_models_score[\"Stacking\"] = {}\n",
    "final_models_score[\"Stacking\"][\"Train Score\"] = accuracy_score(y_train, stack_model_predict(models, stack_model,\n",
    "                                                                                         X_train))\n",
    "final_models_score[\"Stacking\"][\"Validation Score\"] = accuracy_score(y_valid, stack_model_predict(models, stack_model,\n",
    "                                                                                         X_valid))\n",
    "final_models_score[\"Stacking\"][\"Test Score (90 mins)\"] = stack_model_test_acc_no_pk\n",
    "final_models_score[\"Stacking\"][\"Test Score (Softmax)\"] = stack_model_test_acc\n",
    "final_models_score[\"Stacking\"][\"Test Score (WC Playoff Model)\"] = stack_model_test_acc_wc_model\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It seems that stacking in this case did not really help that much. The test accuarcies are quite low, although still higher than those of the baseline model.\n",
    "\n",
    "As mentioned before, we are a bit concerned about the fact that our features are highly correlated, which potentially affects our predictions. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Principal Component Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Principal Component Analysis (PCA) is a way to reduce the dimensionality of dataset by summarizing the variation in our data into a set of new predictors called principal components. These principal components are linear combinations of our original predictors. By selecting the top few principal components, we are projecting our dataset into the space defined by these components. This means that we are projecting our dataset onto a space of smaller dimensionality. Importantly, this will help us reduce the multicollinearity that might be affecting our predictions. Each principal component is constructed such that they are orthogonal with each other. Nonetheless, we understand that this will limit the interpretability of our coefficients.\n",
    "\n",
    "Principal Component Regression (PCR) is basically using the new predictors of reduced dimensionality in a regression problem. In this problem, we inputed the new principal components into our standard logistic regression. In order to decide the number of principal components to keep, we cross-validated the number of principal components that gives us the best validation accuracy. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# scale data\n",
    "scaler = StandardScaler()\n",
    "scaler.fit(X_train)\n",
    "X_train_scaled = scaler.transform(X_train)\n",
    "X_valid_scaled = scaler.transform(X_valid)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "X_wc_scaled = scaler.transform(X_wc)\n",
    "\n",
    "# PCA on data\n",
    "pca = PCA().fit(X_train_scaled)\n",
    "X_train_pca = pca.transform(X_train_scaled)\n",
    "X_valid_pca = pca.transform(X_valid_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "pcr_train_score = []\n",
    "pcr_valid_score = []\n",
    "pcr_wc_score = []\n",
    "\n",
    "for i in np.arange(1, X_train.shape[1]):\n",
    "    pca_cv = PCA(n_components=i).fit(X_train_scaled)\n",
    "    X_train_pca_cv = pca_cv.transform(X_train_scaled)\n",
    "    X_valid_pca_cv = pca_cv.transform(X_valid_scaled)\n",
    "    X_test_pca_cv = pca_cv.transform(X_test_scaled)\n",
    "    X_wc_pca = pca_cv.transform(X_wc_scaled)\n",
    "    pcr_cv_mod = LogisticRegressionCV(solver = 'lbfgs', \n",
    "                                      max_iter = 5000, \n",
    "                                      cv = 5, \n",
    "                                      multi_class='multinomial').fit(X_train_pca_cv, y_train)\n",
    "    pcr_train_score.append(pcr_cv_mod.score(X_train_pca_cv, y_train))\n",
    "    pcr_valid_score.append(pcr_cv_mod.score(X_valid_pca_cv, y_valid))\n",
    "    \n",
    "    #X_wc has very few samples\n",
    "    if i < X_wc.shape[0]:\n",
    "        pcr_wc_mod = LogisticRegressionCV(solver = 'lbfgs', \n",
    "                                          max_iter = 5000, \n",
    "                                          cv = 5, \n",
    "                                          multi_class='multinomial').fit(X_wc_pca, y_wc)\n",
    "        pcr_wc_score.append(pcr_wc_mod.score(X_wc_pca, y_wc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "34"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_wc_pca.shape[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.arange(1,len(pcr_train_score)+1), pcr_train_score, label='Training Accuracy')\n",
    "plt.plot(np.arange(1,len(pcr_valid_score)+1), pcr_valid_score, label='Validation Accuracy')\n",
    "\n",
    "\n",
    "plt.title('Accuracy for Different PCA Components')\n",
    "plt.xlabel('PCA Components')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Validation Accuracy Number of Components: 3\n"
     ]
    }
   ],
   "source": [
    "pca_best_com = np.argmax(pcr_valid_score)+1\n",
    "print('Best Validation Accuracy Number of Components: {}'.format(pca_best_com))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# best mod with highest validation accuracy\n",
    "pca_best = PCA(n_components=pca_best_com).fit(X_train_scaled)\n",
    "X_train_pca_best = pca_best.transform(X_train_scaled)\n",
    "X_valid_pca_best = pca_best.transform(X_valid_scaled)\n",
    "\n",
    "X_wc_pca_best = pca_best.transform(X_wc_scaled)\n",
    "\n",
    "\n",
    "# fit models\n",
    "pcr_best_mod = LogisticRegressionCV(solver = 'lbfgs', \n",
    "                                    max_iter = 5000, \n",
    "                                    cv = 5, \n",
    "                                    multi_class='multinomial').fit(X_train_pca_best, y_train)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PCR (Best) Train Score: 0.5042847725774555\n",
      "PCR (Best) Validation Score: 0.5473684210526316\n"
     ]
    }
   ],
   "source": [
    "# Best Validation Accuracy\n",
    "score[\"pcr_best\"] = {}\n",
    "score[\"pcr_best\"][\"model\"] = pcr_best_mod\n",
    "score[\"pcr_best\"][\"Train Score\"] = pcr_best_mod.score(X_train_pca_best, y_train)\n",
    "score[\"pcr_best\"][\"Validation Score\"] = pcr_best_mod.score(X_valid_pca_best, y_valid)\n",
    "print(\"PCR (Best) Train Score: {}\".format(score[\"pcr_best\"][\"Train Score\"]))\n",
    "print(\"PCR (Best) Validation Score: {}\".format(score[\"pcr_best\"][\"Validation Score\"]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PCR (Best) Test Score at 90 mins: 0.5625\n",
      "PCR (Best) Test Score at end (Softmax): 0.578125\n",
      "PCR (Best) Test Score at end (WC Playoffs Model): 0.609375\n"
     ]
    }
   ],
   "source": [
    "# test set\n",
    "# For third approach, find number of components that maximize the training score of the WC Playoff model.\n",
    "pca_best_com_wc = np.argmax(pcr_wc_score)+1\n",
    "pca_best_wc = PCA(n_components=pca_best_com_wc).fit(X_wc_scaled)\n",
    "X_wc_pca_best = pca_best_wc.transform(X_wc_scaled)\n",
    "\n",
    "pca_wc_mod = LogisticRegressionCV(solver = 'lbfgs', \n",
    "                                    max_iter = 5000, \n",
    "                                    cv = 5, \n",
    "                                    multi_class='multinomial').fit(X_wc_pca_best, y_wc)\n",
    "X_test_pca_best = pca_best.transform(X_test_scaled)\n",
    "X_test_pca_best_wc = pca_best_wc.transform(X_test_scaled)\n",
    "pcr_best_test_pred = predict_test_data(X_test_pca_best, pcr_best_mod)\n",
    "pcr_best_test_pred_wc_model = list(pcr_best_mod.predict(X_test_pca_best[:48])) + list(pca_wc_mod.predict(X_test_pca_best_wc[48:]))\n",
    "pcr_best_test_acc = accuracy_score(y_test, pcr_best_test_pred)\n",
    "pcr_best_test_acc_no_pk = pcr_best_mod.score(X_test_pca_best, y_test_no_pk)\n",
    "pcr_best_test_acc_wc_model = accuracy_score(y_test, pcr_best_test_pred_wc_model)\n",
    "\n",
    "print(\"PCR (Best) Test Score at 90 mins: {}\".format(pcr_best_test_acc_no_pk))\n",
    "print(\"PCR (Best) Test Score at end (Softmax): {}\".format(pcr_best_test_acc))\n",
    "print(\"PCR (Best) Test Score at end (WC Playoffs Model): {}\".format(pcr_best_test_acc_wc_model))\n",
    "\n",
    "\n",
    "final_models_score[\"PCR\"] = {}\n",
    "final_models_score[\"PCR\"][\"Train Score\"] = score['pcr_best']['Train Score']\n",
    "final_models_score[\"PCR\"][\"Validation Score\"] = score['pcr_best']['Validation Score']\n",
    "final_models_score[\"PCR\"][\"Test Score (90 mins)\"] = pcr_best_test_acc_no_pk\n",
    "final_models_score[\"PCR\"][\"Test Score (Softmax)\"] = pcr_best_test_acc\n",
    "final_models_score[\"PCR\"][\"Test Score (WC Playoff Model)\"] = pcr_best_test_acc_wc_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this case, PCR was not a good option. The test accuracy decreased quite significantly. We may need to take into the account the outcome as well when we reduce the dimension of our feature set."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Least Squares Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Another way that can help us deal with the issues of multicollinearity in our dataset is Partial Least Squares Regression (PLSR). Similar to PCA, PLSR involves projecting the predictors onto orthogonal components. However, the PLSR components are constructed such that they not only approximate the predictors, but are also well correlated with the response. As such, we assume that both the predictors and the response are functions of (reduced) principal components. In this problem, our response variable is a multi-class categorical variable. As such, we could use the PLS2 algorithm which simultaneously decomposes on the multi-class variable directly. We could also use the PLS1 algorithm on each category in our response variable separately. \n",
    "\n",
    "To demonstrate how the Partial Least Squares algorithms works, we have included a pseudo-code for PLS1:\n",
    "\n",
    "Set $X_0 = X$, and $y_0 = y$\n",
    "\n",
    "for $h = 1, 2, ... r$ do (where r is the dimension of the predictors)\n",
    "\n",
    "$\\hspace{1cm} \\mathbf{w_h} = \\mathbf{X^T_{h-1}y_{h-1}/y^T_{h-1}y_{h-1}}$ (regress predictors $x_j$ on response $y$)\n",
    "\n",
    "$\\hspace{1cm} ||\\mathbf{w_h}|| = 1$ (normalize)\n",
    "\n",
    "$\\hspace{1cm} \\mathbf{z_h} = \\mathbf{X_{h-1}w_h/w^T_hw_h}$ (regress predictors $x_j$ on weights $w_h$)\n",
    "\n",
    "$\\hspace{1cm} \\mathbf{p_h} = \\mathbf{X^T_{h-1}z_h/z^T_hz_h}$ (regress predictors $x_j$ on components $z_h$)\n",
    "\n",
    "$\\hspace{1cm} \\mathbf{X_h} = \\mathbf{X_{h-1} - z_hp^T_h}$ (deflate $X_{h-1}$)\n",
    "\n",
    "$\\hspace{1cm} d_h = \\mathbf{y^T_hz_h/z^T_hz_h}$ (regress response $y_h$ onto components $z_h$)\n",
    "\n",
    "$\\hspace{1cm} \\mathbf{y_h} = \\mathbf{y_{h-1} - d_hz_h}$ (deflate $y_{h-1}$)\n",
    "\n",
    "end for\n",
    "\n",
    "The PLS2 algorithm is just an extension for a multi-dimensional response variable.\n",
    "\n",
    "Importantly, PLS selects components which gives us the greatest reduction in the covariance of our predictors and response. If we represent our components as $\\mathbf{z}$, and the response as $\\mathbf{y}$, it can be shown that PLSR optimizes with respect to the weights $\\mathbf{w}$\n",
    "\n",
    "$$ \\arg\\max_{\\mathbf{w}} cor^2(\\mathbf{y, z})var(\\mathbf{y})var(\\mathbf{z})$$\n",
    "\n",
    "It can thus be seen that PLSR tries to maximize the correlation between the components and the response whilst trying to maximize the variance captured by the components. \n",
    "\n",
    "This not only allows us to resolve the multicollinearity issues through the creation of orthogonal components just as in PCR, but also allows us to create components that are correlated with the response. It is likely that this might perform even better than PCR."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "lb = LabelBinarizer()\n",
    "y_train_lb = lb.fit_transform(y_train)\n",
    "y_valid_lb = lb.fit_transform(y_valid)\n",
    "y_wc_lb = lb.fit_transform(y_wc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "plsda1_train_score = []\n",
    "plsda1_valid_score = []\n",
    "\n",
    "\n",
    "# PLS1\n",
    "for i in np.arange(1, X_train.shape[1]):\n",
    "    # initialize empty array\n",
    "    train_pred = np.empty(y_train_lb.shape)\n",
    "    valid_pred = np.empty(y_valid_lb.shape)\n",
    "    \n",
    "    plsda1_mod = PLSRegression(n_components=i, scale=False) \n",
    "    plsda1_mod.fit(X_train_scaled, y_train_lb[:,0])\n",
    "    train_pred[:,0] = plsda1_mod.predict(X_train_scaled).ravel()\n",
    "    valid_pred[:,0] = plsda1_mod.predict(X_valid_scaled).ravel()\n",
    "    plsda1_mod.fit(X_train_scaled, y_train_lb[:,1])\n",
    "    train_pred[:,1] = plsda1_mod.predict(X_train_scaled).ravel()\n",
    "    valid_pred[:,1] = plsda1_mod.predict(X_valid_scaled).ravel()\n",
    "    plsda1_mod.fit(X_train_scaled, y_train_lb[:,2])\n",
    "    train_pred[:,2] = plsda1_mod.predict(X_train_scaled).ravel()\n",
    "    valid_pred[:,2] = plsda1_mod.predict(X_valid_scaled).ravel()\n",
    "\n",
    "    \n",
    "    plsda1_train_score.append(accuracy_score(y_train, np.argmax(train_pred, axis=1) - 1))\n",
    "    plsda1_valid_score.append(accuracy_score(y_valid, np.argmax(valid_pred, axis=1) - 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.arange(1,len(plsda1_train_score)+1), plsda1_train_score, label='Training Accuracy')\n",
    "plt.plot(np.arange(1,len(plsda1_valid_score)+1), plsda1_valid_score, label='Validation Accuracy')\n",
    "\n",
    "plt.title('Accuracy for Different PLS1-DA Components')\n",
    "plt.xlabel('PLS1-DA Components')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Validation Accuracy Number of Components: 16\n"
     ]
    }
   ],
   "source": [
    "plsda1_best_com = np.argmax(plsda1_valid_score)+1\n",
    "print('Best Validation Accuracy Number of Components: {}'.format(plsda1_best_com))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# check test accuracy\n",
    "# initialize arrays\n",
    "best_train_pred = np.empty(y_train_lb.shape)\n",
    "best_valid_pred = np.empty(y_valid_lb.shape)\n",
    "best_test_pred = np.empty((y_test.shape[0],3))\n",
    "\n",
    "# fit model\n",
    "plsda1_best_mod = PLSRegression(n_components=plsda1_best_com, scale=False) \n",
    "\n",
    "# predict\n",
    "plsda1_best_mod.fit(X_train_scaled, y_train_lb[:,0])\n",
    "best_train_pred[:,0] = plsda1_best_mod.predict(X_train_scaled).ravel()\n",
    "best_valid_pred[:,0] = plsda1_best_mod.predict(X_valid_scaled).ravel()\n",
    "best_test_pred[:,0] = plsda1_best_mod.predict(X_test_scaled).ravel()\n",
    "\n",
    "# predict\n",
    "plsda1_best_mod.fit(X_train_scaled, y_train_lb[:,1])\n",
    "best_train_pred[:,1] = plsda1_best_mod.predict(X_train_scaled).ravel()\n",
    "best_valid_pred[:,1] = plsda1_best_mod.predict(X_valid_scaled).ravel()\n",
    "best_test_pred[:,1] = plsda1_best_mod.predict(X_test_scaled).ravel()\n",
    "\n",
    "# predict\n",
    "plsda1_best_mod.fit(X_train_scaled, y_train_lb[:,2])\n",
    "best_train_pred[:,2] = plsda1_best_mod.predict(X_train_scaled).ravel()\n",
    "best_valid_pred[:,2] = plsda1_best_mod.predict(X_valid_scaled).ravel()\n",
    "best_test_pred[:,2] = plsda1_best_mod.predict(X_test_scaled).ravel()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PLS1-DA (Best) Train Score: 0.5227422544495716\n",
      "PLS1-DA (Best) Validation Score: 0.5552631578947368\n"
     ]
    }
   ],
   "source": [
    "# Best Validation Accuracy\n",
    "score[\"plsda1_best\"] = {}\n",
    "score[\"plsda1_best\"][\"model\"] = plsda1_best_mod\n",
    "score[\"plsda1_best\"][\"Train Score\"] = accuracy_score(y_train, np.argmax(best_train_pred, axis=1) - 1)\n",
    "score[\"plsda1_best\"][\"Validation Score\"] = accuracy_score(y_valid, np.argmax(best_valid_pred, axis=1) - 1)\n",
    "print(\"PLS1-DA (Best) Train Score: {}\".format(score[\"plsda1_best\"][\"Train Score\"]))\n",
    "print(\"PLS1-DA (Best) Validation Score: {}\".format(score[\"plsda1_best\"][\"Validation Score\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "plsda2_train_score = []\n",
    "plsda2_valid_score = []\n",
    "plsda_wc_score = []\n",
    "\n",
    "# PLS2\n",
    "for i in np.arange(1, X_train.shape[1]):\n",
    "    plsda2_mod = PLSRegression(n_components=i, scale=False) \n",
    "    plsda2_mod.fit(X_train_scaled, y_train_lb)\n",
    "\n",
    "    plsda2_train_score.append(accuracy_score(y_train, np.argmax(plsda2_mod.predict(X_train_scaled), axis=1) - 1))\n",
    "    plsda2_valid_score.append(accuracy_score(y_valid, np.argmax(plsda2_mod.predict(X_valid_scaled), axis=1) - 1))\n",
    "    \n",
    "    if i < X_wc.shape[0]:\n",
    "        #When there are only two labels, >0 means class 1 have higher probability\n",
    "        plsda_mod_wc = PLSRegression(n_components=i, scale=False) \n",
    "        plsda_mod_wc.fit(X_wc_scaled, y_wc_lb)\n",
    "        plsda_wc_score.append(accuracy_score(y_wc, list(np.where(plsda_mod_wc.predict(X_wc_scaled) > 0, 1, -1))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.arange(1,len(plsda2_train_score)+1), plsda2_train_score, label='Training Accuracy')\n",
    "plt.plot(np.arange(1,len(plsda2_valid_score)+1), plsda2_valid_score, label='Validation Accuracy')\n",
    "\n",
    "plt.title('Accuracy for Different PLS2-DA Components')\n",
    "plt.xlabel('PLS2-DA Components')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Validation Accuracy Number of Components: 9\n"
     ]
    }
   ],
   "source": [
    "plsda2_best_com = np.argmax(plsda2_valid_score)+1\n",
    "print('Best Validation Accuracy Number of Components: {}'.format(plsda2_best_com))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "plsda2_best_mod = PLSRegression(n_components=plsda2_best_com, scale=False) \n",
    "plsda2_best_mod.fit(X_train_scaled, y_train_lb);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PLS2-DA (Best) Train Score: 0.5181278839815425\n",
      "PLS2-DA (Best) Validation Score: 0.5526315789473685\n"
     ]
    }
   ],
   "source": [
    "# Best Validation Accuracy\n",
    "score[\"plsda2_best\"] = {}\n",
    "score[\"plsda2_best\"][\"model\"] = plsda2_best_mod\n",
    "score[\"plsda2_best\"][\"Train Score\"] = accuracy_score(y_train, np.argmax(plsda2_best_mod.predict(X_train_scaled), axis=1) - 1)\n",
    "score[\"plsda2_best\"][\"Validation Score\"] = accuracy_score(y_valid, np.argmax(plsda2_best_mod.predict(X_valid_scaled), axis=1) - 1)\n",
    "print(\"PLS2-DA (Best) Train Score: {}\".format(score[\"plsda2_best\"][\"Train Score\"]))\n",
    "print(\"PLS2-DA (Best) Validation Score: {}\".format(score[\"plsda2_best\"][\"Validation Score\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the case of binary labels, PLS1-DA and PLS2-DA are the same, so we will look at the third approach in PLS2-DA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PLS1-DA (Best) Test Score at 90 mins: 0.640625\n",
      "PLS1-DA (Best) Test Score at end (Softmax): 0.6875\n",
      "PLS2-DA (Best) Test Score at 90 mins: 0.59375\n",
      "PLS2-DA (Best) Test Score at end (Softmax): 0.625\n",
      "PLS1-DA/PLS2-DA (Best) Test Score at end (WC Playoffs Model): 0.65625\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "plsda2_best_com_wc = np.argmax(plsda_wc_score)+1\n",
    "\n",
    "\n",
    "plsda2_wc_mod = PLSRegression(n_components=plsda2_best_com_wc, scale=False).fit(X_wc_scaled, y_wc_lb)\n",
    "\n",
    "plsda2_best_test_pred = [np.where(np.argsort(val) == 1)[0][0]-1 if (i >= 48) & (np.argmax(val) == 1)\n",
    "                       else np.argmax(val)-1 for i, val in enumerate(plsda2_best_mod.predict(X_test_scaled))]\n",
    "\n",
    "plsda2_best_test_pred_wc = [np.argmax(val)-1 for val in plsda2_best_mod.predict(X_test_scaled[:48])] +\\\n",
    "                        list(np.where(plsda2_wc_mod.predict(X_test_scaled[48:]) > 0, 1, -1))\n",
    "\n",
    "plsda1_best_test_pred = [np.where(np.argsort(val) == 1)[0][0]-1 if (i >= 48) & (np.argmax(val) == 1) \n",
    "                       else np.argmax(val)-1 for i, val in enumerate(best_test_pred)]\n",
    "\n",
    "print(\"PLS1-DA (Best) Test Score at 90 mins: {}\".format(accuracy_score(y_test_no_pk, np.argmax(best_test_pred, axis=1) - 1)))\n",
    "print(\"PLS1-DA (Best) Test Score at end (Softmax): {}\".format(accuracy_score(y_test, plsda1_best_test_pred)))\n",
    "\n",
    "print(\"PLS2-DA (Best) Test Score at 90 mins: {}\".format(accuracy_score(y_test_no_pk, np.argmax(plsda2_best_mod.predict(X_test_scaled), axis=1) - 1)))\n",
    "print(\"PLS2-DA (Best) Test Score at end (Softmax): {}\".format(accuracy_score(y_test, plsda2_best_test_pred)))\n",
    "print(\"PLS1-DA/PLS2-DA (Best) Test Score at end (WC Playoffs Model): {}\".format(accuracy_score(y_test, plsda2_best_test_pred_wc)))\n",
    "\n",
    "final_models_score[\"PLS1-DA\"] = {}\n",
    "final_models_score[\"PLS1-DA\"][\"Train Score\"] = score['plsda1_best']['Train Score']\n",
    "final_models_score[\"PLS1-DA\"][\"Validation Score\"] = score['plsda1_best']['Validation Score']\n",
    "final_models_score[\"PLS1-DA\"][\"Test Score (90 mins)\"] = accuracy_score(y_test_no_pk, np.argmax(best_test_pred, axis=1) - 1)\n",
    "final_models_score[\"PLS1-DA\"][\"Test Score (Softmax)\"] = accuracy_score(y_test, plsda1_best_test_pred)\n",
    "#Same as PLS2-DA as mentioned\n",
    "final_models_score[\"PLS1-DA\"][\"Test Score (WC Playoff Model)\"] = accuracy_score(y_test, plsda2_best_test_pred_wc)\n",
    "\n",
    "final_models_score[\"PLS2-DA\"] = {}\n",
    "final_models_score[\"PLS2-DA\"][\"Train Score\"] = score['plsda2_best']['Train Score']\n",
    "final_models_score[\"PLS2-DA\"][\"Validation Score\"] = score['plsda2_best']['Validation Score']\n",
    "final_models_score[\"PLS2-DA\"][\"Test Score (90 mins)\"] = accuracy_score(y_test_no_pk, np.argmax(plsda2_best_mod.predict(X_test_scaled), axis=1) - 1)\n",
    "final_models_score[\"PLS2-DA\"][\"Test Score (Softmax)\"] = accuracy_score(y_test, plsda2_best_test_pred)\n",
    "final_models_score[\"PLS2-DA\"][\"Test Score (WC Playoff Model)\"] = accuracy_score(y_test, plsda2_best_test_pred_wc)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compared to the full model,  we do not see much change in the PLS1-DA model on the test set while we see a decrease in performance of PLS2-DA on the test set, although PLS1-DA does perform better in the second approach than the full model does; thus PLS1-DA is the best model we have seen so far! What's more important is that the validation scores for PLS1-DA were higher than those in the full model. It is likely that multicollinearity was causing the decrease in our validation scores.\n",
    "\n",
    "Now, suppose we don't actually know anything about the test set. Which model would we have actually chosen? Like before, we can only look at the validation scores. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Train Score</th>\n",
       "      <th>Validation Score</th>\n",
       "      <th>Test Score (90 mins)</th>\n",
       "      <th>Test Score (Softmax)</th>\n",
       "      <th>Test Score (WC Playoff Model)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>LDA</th>\n",
       "      <td>0.524720</td>\n",
       "      <td>0.547368</td>\n",
       "      <td>0.640625</td>\n",
       "      <td>0.671875</td>\n",
       "      <td>0.656250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stacking</th>\n",
       "      <td>0.566249</td>\n",
       "      <td>0.536842</td>\n",
       "      <td>0.609375</td>\n",
       "      <td>0.625000</td>\n",
       "      <td>0.640625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PCR</th>\n",
       "      <td>0.504285</td>\n",
       "      <td>0.547368</td>\n",
       "      <td>0.562500</td>\n",
       "      <td>0.578125</td>\n",
       "      <td>0.609375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PLS1-DA</th>\n",
       "      <td>0.522742</td>\n",
       "      <td>0.555263</td>\n",
       "      <td>0.640625</td>\n",
       "      <td>0.687500</td>\n",
       "      <td>0.656250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PLS2-DA</th>\n",
       "      <td>0.518128</td>\n",
       "      <td>0.552632</td>\n",
       "      <td>0.593750</td>\n",
       "      <td>0.625000</td>\n",
       "      <td>0.656250</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Train Score  Validation Score  Test Score (90 mins)  \\\n",
       "LDA          0.524720          0.547368              0.640625   \n",
       "Stacking     0.566249          0.536842              0.609375   \n",
       "PCR          0.504285          0.547368              0.562500   \n",
       "PLS1-DA      0.522742          0.555263              0.640625   \n",
       "PLS2-DA      0.518128          0.552632              0.593750   \n",
       "\n",
       "          Test Score (Softmax)  Test Score (WC Playoff Model)  \n",
       "LDA                   0.671875                       0.656250  \n",
       "Stacking              0.625000                       0.640625  \n",
       "PCR                   0.578125                       0.609375  \n",
       "PLS1-DA               0.687500                       0.656250  \n",
       "PLS2-DA               0.625000                       0.656250  "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df_result = pd.DataFrame(final_models_score).T\n",
    "final_df_result = final_df_result[['Train Score', 'Validation Score', 'Test Score (90 mins)', 'Test Score (Softmax)',\n",
    "                                  'Test Score (WC Playoff Model)']]\n",
    "final_df_result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on validation scores, we would have chosen PLS1-DA, the best model!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Combine with baseline model results and save to csv\n",
    "baseline_results = pd.read_csv('baseline_model_results.csv')\n",
    "final_df_result['Model Name'] = final_df_result.index\n",
    "all_model_results = baseline_results.append(final_df_result.reset_index(drop = True)).reset_index(drop = True)\n",
    "all_model_results = all_model_results[['Model Name', 'Train Score', 'Validation Score', 'Test Score (90 mins)', 'Test Score (Softmax)',\n",
    "                                  'Test Score (WC Playoff Model)']]\n",
    "all_model_results.to_csv('all_model_results.csv', index = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's see the confusion matrices for our best model, PLS1-DA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#https://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html#sphx-glr-auto-examples-model-selection-plot-confusion-matrix-py\n",
    "def plot_confusion_matrix(cm, classes, ax,\n",
    "                          normalize=False,\n",
    "                          title='Confusion matrix',\n",
    "                          cmap=plt.cm.Blues):\n",
    "    \"\"\"\n",
    "    This function prints and plots the confusion matrix.\n",
    "    Normalization can be applied by setting `normalize=True`.\n",
    "    \"\"\"\n",
    "    if normalize:\n",
    "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "    ax.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "    ax.set_title(title)\n",
    "    tick_marks = np.arange(len(classes))\n",
    "    ax.set_xticks(tick_marks)\n",
    "    ax.set_xticklabels(classes, rotation=45)\n",
    "    ax.set_yticks(tick_marks)\n",
    "    ax.set_yticklabels(classes)\n",
    "\n",
    "    fmt = '.2f' if normalize else 'd'\n",
    "    thresh = cm.max() / 2.\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "        ax.text(j, i, format(cm[i, j], fmt),\n",
    "                 horizontalalignment=\"center\",\n",
    "                 color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "\n",
    "    ax.set_ylabel('True label')\n",
    "    ax.set_xlabel('Predicted label')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.set_printoptions(precision=2)\n",
    "\n",
    "\n",
    "train_cm = confusion_matrix(y_train, np.argmax(best_train_pred, axis=1) - 1)\n",
    "test_90mins_cm =  confusion_matrix(y_test_no_pk, np.argmax(best_test_pred, axis=1) - 1)\n",
    "test_cm = confusion_matrix(y_test, plsda1_best_test_pred)\n",
    "test_wc_cm =  confusion_matrix(y_test, plsda2_best_test_pred_wc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x864 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = plt.subplots(2, 2, figsize = (14, 12))\n",
    "plot_confusion_matrix(train_cm, ['Home Loss', 'Draw', 'Home Win'], axs[0,0], True, 'Train')\n",
    "plot_confusion_matrix(test_90mins_cm, ['Home Loss', 'Draw', 'Home Win'], axs[0,1], True, 'Test (90 Mins)')\n",
    "plot_confusion_matrix(test_cm, ['Home Loss', 'Draw', 'Home Win'], axs[1,0], True, 'Test (Softmax)')\n",
    "plot_confusion_matrix(test_wc_cm, ['Home Loss', 'Draw', 'Home Win'], axs[1,1], True, 'Test (WC Playoff Model)')\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The model is actually predicting some draws now for the training set and test set, although still very little. As mentioned before, it is just very hard to predict draws, but this is definitely an improvement compared to the baseline model. \n",
    "\n",
    "Compared to the baseline model, it seems that the model is better in predicting when \"home\" team loses in the test set in all three approaches. This might be due to some bias of how we feature engineer. Since none of us really were experts in soccer, we chose features that we observed from the World Cup alone, so these features might be biased toward the test set. \n",
    "\n",
    "The Softmax approach had higher home loss and home win accuracies than the WC Playoff Model approach; this might be due to the small training set for the playoff matches, so we could just be overfitting to the traing set. As mentioned in the baseline model, we cannot really compare the confusion matrices of the three approaches to the test set, as the true labels between the 90 minutes approach are different from those than the true labels in the other two approaches. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
