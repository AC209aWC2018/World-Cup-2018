{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Modeling with Feature Engineered Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.linear_model import LogisticRegressionCV, LogisticRegression\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n",
    "from predict_test_data import predict_test_data\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import LabelBinarizer\n",
    "from sklearn.cross_decomposition import PLSRegression\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import itertools\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "%matplotlib inline\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv('../data/cleaned/train_final.csv')\n",
    "test = pd.read_csv('../data/cleaned/test_final.csv')\n",
    "wc_playoffs_train = pd.read_csv('../data/cleaned/wc_playoffs_final.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To begin, let's just naively use all the features we have feature engineered."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "columns = ['overall_diff', 'attack_away_defence_home_diff', 'attack_diff',\n",
    "           'attack_home_defence_away_diff', 'defence_diff', 'midfield_diff',\n",
    "           'prestige_diff', 'growth_diff', 'full_age_diff',\n",
    "           'start_age_diff', 'value_euros_millions_diff',\n",
    "           'wage_euros_thousands_diff', 'goalkeeper_overall_diff',\n",
    "           'bup_dribbling_diff', 'bup_passing_diff', 'bup_speed_diff',\n",
    "           'cc_crossing_diff', 'cc_passing_diff', 'cc_shooting_diff',\n",
    "           'd_aggresion_diff', 'd_pressure_diff', 'd_width_diff', \n",
    "           'gdp_diff', 'is_home', 'raw_gdp_diff', \n",
    "           'win_momentum_past_1_games_diff', 'lose_momentum_past_1_games_diff',\n",
    "           'win_momentum_past_2_games_diff', 'lose_momentum_past_2_games_diff',\n",
    "           'win_momentum_past_3_games_diff', 'lose_momentum_past_3_games_diff',\n",
    "           'win_momentum_past_4_games_diff', 'lose_momentum_past_4_games_diff',\n",
    "           'win_momentum_past_5_games_diff', 'lose_momentum_past_5_games_diff',\n",
    "]\n",
    "\n",
    "train = train[columns + ['home_win']]\n",
    "test = test[columns  + ['home_win', 'home_win_no_pk']]\n",
    "wc_train = wc_playoffs_train[columns + ['home_win']]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Same seed as baseline to ensure same train and validation sets so that comparisons are valid.\n",
    "np.random.seed(14)\n",
    "X_train, X_valid = train_test_split(train, test_size = 0.2)\n",
    "y_train = X_train['home_win'].ravel()\n",
    "X_train = X_train.drop(['home_win'], axis = 1)\n",
    "y_valid= X_valid['home_win'].ravel()\n",
    "X_valid = X_valid.drop(['home_win'], axis = 1)\n",
    "y_test = test['home_win'].ravel()\n",
    "y_test_no_pk = test['home_win_no_pk'].ravel()\n",
    "X_test = test.drop(['home_win', 'home_win_no_pk'], axis = 1)\n",
    "y_wc = wc_train['home_win'].ravel()\n",
    "X_wc = wc_train.drop(['home_win'], axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fitting the Models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similar to before, we will fit different classification models on our data and select the one with the best validation accuracy. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "score = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression Train Score: 0.5069215557020436\n",
      "Logistic Regression Validation Score: 0.5368421052631579\n"
     ]
    }
   ],
   "source": [
    "lr_model = LogisticRegressionCV(solver = 'lbfgs', max_iter = 5000, cv = 5, multi_class='multinomial').fit(X_train, y_train)\n",
    "score[\"Logistic Regression\"] = {}\n",
    "score[\"Logistic Regression\"][\"model\"] = lr_model\n",
    "score[\"Logistic Regression\"][\"Train Score\"] = lr_model.score(X_train, y_train)\n",
    "score[\"Logistic Regression\"][\"Validation Score\"] = lr_model.score(X_valid, y_valid)\n",
    "\n",
    "print(\"Logistic Regression Train Score: {}\".format(score[\"Logistic Regression\"][\"Train Score\"]))\n",
    "print(\"Logistic Regression Validation Score: {}\".format(score[\"Logistic Regression\"][\"Validation Score\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Like before, we first check whether the variances across the three outcomes are equal, and they do seem quite equal.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>overall_diff</th>\n",
       "      <th>attack_away_defence_home_diff</th>\n",
       "      <th>attack_diff</th>\n",
       "      <th>attack_home_defence_away_diff</th>\n",
       "      <th>defence_diff</th>\n",
       "      <th>midfield_diff</th>\n",
       "      <th>prestige_diff</th>\n",
       "      <th>growth_diff</th>\n",
       "      <th>full_age_diff</th>\n",
       "      <th>start_age_diff</th>\n",
       "      <th>...</th>\n",
       "      <th>win_momentum_past_1_games_diff</th>\n",
       "      <th>lose_momentum_past_1_games_diff</th>\n",
       "      <th>win_momentum_past_2_games_diff</th>\n",
       "      <th>lose_momentum_past_2_games_diff</th>\n",
       "      <th>win_momentum_past_3_games_diff</th>\n",
       "      <th>lose_momentum_past_3_games_diff</th>\n",
       "      <th>win_momentum_past_4_games_diff</th>\n",
       "      <th>lose_momentum_past_4_games_diff</th>\n",
       "      <th>win_momentum_past_5_games_diff</th>\n",
       "      <th>lose_momentum_past_5_games_diff</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>home_win</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>-1</th>\n",
       "      <td>31.393396</td>\n",
       "      <td>38.015113</td>\n",
       "      <td>40.858572</td>\n",
       "      <td>41.497639</td>\n",
       "      <td>37.554931</td>\n",
       "      <td>38.133908</td>\n",
       "      <td>25.423806</td>\n",
       "      <td>2.770866</td>\n",
       "      <td>2.489490</td>\n",
       "      <td>4.552043</td>\n",
       "      <td>...</td>\n",
       "      <td>0.294715</td>\n",
       "      <td>0.028413</td>\n",
       "      <td>0.582006</td>\n",
       "      <td>0.055080</td>\n",
       "      <td>0.838886</td>\n",
       "      <td>0.080313</td>\n",
       "      <td>1.163321</td>\n",
       "      <td>0.113674</td>\n",
       "      <td>1.431640</td>\n",
       "      <td>0.143578</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>36.158215</td>\n",
       "      <td>46.202150</td>\n",
       "      <td>47.654088</td>\n",
       "      <td>46.137393</td>\n",
       "      <td>43.559341</td>\n",
       "      <td>41.798216</td>\n",
       "      <td>30.781631</td>\n",
       "      <td>2.593080</td>\n",
       "      <td>2.596855</td>\n",
       "      <td>4.532752</td>\n",
       "      <td>...</td>\n",
       "      <td>0.271093</td>\n",
       "      <td>0.028312</td>\n",
       "      <td>0.523516</td>\n",
       "      <td>0.054950</td>\n",
       "      <td>0.808391</td>\n",
       "      <td>0.087430</td>\n",
       "      <td>1.049194</td>\n",
       "      <td>0.111427</td>\n",
       "      <td>1.315560</td>\n",
       "      <td>0.141014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>37.105145</td>\n",
       "      <td>47.913430</td>\n",
       "      <td>49.295727</td>\n",
       "      <td>45.265228</td>\n",
       "      <td>43.509512</td>\n",
       "      <td>42.634416</td>\n",
       "      <td>26.985673</td>\n",
       "      <td>2.953428</td>\n",
       "      <td>2.406626</td>\n",
       "      <td>4.359358</td>\n",
       "      <td>...</td>\n",
       "      <td>0.248230</td>\n",
       "      <td>0.026205</td>\n",
       "      <td>0.465120</td>\n",
       "      <td>0.049671</td>\n",
       "      <td>0.717445</td>\n",
       "      <td>0.076786</td>\n",
       "      <td>1.023086</td>\n",
       "      <td>0.111290</td>\n",
       "      <td>1.291213</td>\n",
       "      <td>0.144669</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          overall_diff  attack_away_defence_home_diff  attack_diff  \\\n",
       "home_win                                                             \n",
       "-1           31.393396                      38.015113    40.858572   \n",
       " 0           36.158215                      46.202150    47.654088   \n",
       " 1           37.105145                      47.913430    49.295727   \n",
       "\n",
       "          attack_home_defence_away_diff  defence_diff  midfield_diff  \\\n",
       "home_win                                                               \n",
       "-1                            41.497639     37.554931      38.133908   \n",
       " 0                            46.137393     43.559341      41.798216   \n",
       " 1                            45.265228     43.509512      42.634416   \n",
       "\n",
       "          prestige_diff  growth_diff  full_age_diff  start_age_diff  \\\n",
       "home_win                                                              \n",
       "-1            25.423806     2.770866       2.489490        4.552043   \n",
       " 0            30.781631     2.593080       2.596855        4.532752   \n",
       " 1            26.985673     2.953428       2.406626        4.359358   \n",
       "\n",
       "                       ...                 win_momentum_past_1_games_diff  \\\n",
       "home_win               ...                                                  \n",
       "-1                     ...                                       0.294715   \n",
       " 0                     ...                                       0.271093   \n",
       " 1                     ...                                       0.248230   \n",
       "\n",
       "          lose_momentum_past_1_games_diff  win_momentum_past_2_games_diff  \\\n",
       "home_win                                                                    \n",
       "-1                               0.028413                        0.582006   \n",
       " 0                               0.028312                        0.523516   \n",
       " 1                               0.026205                        0.465120   \n",
       "\n",
       "          lose_momentum_past_2_games_diff  win_momentum_past_3_games_diff  \\\n",
       "home_win                                                                    \n",
       "-1                               0.055080                        0.838886   \n",
       " 0                               0.054950                        0.808391   \n",
       " 1                               0.049671                        0.717445   \n",
       "\n",
       "          lose_momentum_past_3_games_diff  win_momentum_past_4_games_diff  \\\n",
       "home_win                                                                    \n",
       "-1                               0.080313                        1.163321   \n",
       " 0                               0.087430                        1.049194   \n",
       " 1                               0.076786                        1.023086   \n",
       "\n",
       "          lose_momentum_past_4_games_diff  win_momentum_past_5_games_diff  \\\n",
       "home_win                                                                    \n",
       "-1                               0.113674                        1.431640   \n",
       " 0                               0.111427                        1.315560   \n",
       " 1                               0.111290                        1.291213   \n",
       "\n",
       "          lose_momentum_past_5_games_diff  \n",
       "home_win                                   \n",
       "-1                               0.143578  \n",
       " 0                               0.141014  \n",
       " 1                               0.144669  \n",
       "\n",
       "[3 rows x 35 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.groupby('home_win').var()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "lda_model = LinearDiscriminantAnalysis().fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LDA Train Score: 0.5247198417930126\n",
      "LDA Validation Score: 0.5473684210526316\n"
     ]
    }
   ],
   "source": [
    "score[\"LDA\"] = {}\n",
    "score[\"LDA\"][\"model\"] = lda_model\n",
    "score[\"LDA\"][\"Train Score\"] = lda_model.score(X_train, y_train)\n",
    "score[\"LDA\"][\"Validation Score\"] = lda_model.score(X_valid, y_valid)\n",
    "print(\"LDA Train Score: {}\".format(score[\"LDA\"][\"Train Score\"]))\n",
    "print(\"LDA Validation Score: {}\".format(score[\"LDA\"][\"Validation Score\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Likewise, we try out QDA as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "qda_model = QuadraticDiscriminantAnalysis().fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "QDA Train Score: 0.4963744232036915\n",
      "QDA Validation Score: 0.45263157894736844\n"
     ]
    }
   ],
   "source": [
    "score[\"QDA\"] = {}\n",
    "score[\"QDA\"]['model'] = qda_model\n",
    "score[\"QDA\"][\"Train Score\"] = qda_model.score(X_train, y_train)\n",
    "score[\"QDA\"][\"Validation Score\"] = qda_model.score(X_valid, y_valid)\n",
    "print(\"QDA Train Score: {}\".format(score[\"QDA\"][\"Train Score\"]))\n",
    "print(\"QDA Validation Score: {}\".format(score[\"QDA\"][\"Validation Score\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will also try out Random Forest."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf_params = {'bootstrap': [True, False],\n",
    "             'max_depth': [3, 5, 10, 20, 30, 40, None],\n",
    "             'max_features': ['auto', 'sqrt'],\n",
    "             'min_samples_leaf': [1, 2, 4, 10, 20],\n",
    "             'min_samples_split': [2, 5, 10],\n",
    "             'n_estimators': [10, 50, 100, 200, 500]}\n",
    "\n",
    "rf_model = RandomizedSearchCV(estimator=RandomForestClassifier(), param_distributions=rf_params,\\\n",
    "                                   n_iter=50, scoring='accuracy', n_jobs=-1, cv=5, verbose=0).fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest Train Score: 0.5266974291364536\n",
      "Random Forest Validation Score 0.5184210526315789\n"
     ]
    }
   ],
   "source": [
    "score[\"Random Forest\"] = {}\n",
    "score[\"Random Forest\"]['model'] = rf_model\n",
    "score[\"Random Forest\"][\"Train Score\"] = rf_model.score(X_train, y_train)\n",
    "score[\"Random Forest\"][\"Validation Score\"] = rf_model.score(X_valid, y_valid)\n",
    "print(\"Random Forest Train Score: {}\".format(score[\"Random Forest\"][\"Train Score\"]))\n",
    "print(\"Random Forest Validation Score {}\".format(score[\"Random Forest\"][\"Validation Score\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, XGBoost."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "xgb_params = {\n",
    "    'min_child_weight': [1, 5, 10],\n",
    "    'gamma': [0.5, 1, 1.5, 2, 5],\n",
    "    'subsample': [0.6, 0.8, 1.0],\n",
    "    'colsample_bytree': [0.6, 0.8, 1.0],\n",
    "    'max_depth': [3, 4, 5]\n",
    "    }\n",
    "xgb_model = RandomizedSearchCV(estimator=XGBClassifier(objective='multi:softmax', num_class = 3), param_distributions=xgb_params,\\\n",
    "                                   n_iter=50, scoring='accuracy', n_jobs=-1, cv=5, verbose=0).fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost Train Score: 0.5398813447593935\n",
      "XGBoost Validation Score 0.5342105263157895\n"
     ]
    }
   ],
   "source": [
    "score[\"XGBoost\"] = {}\n",
    "score[\"XGBoost\"]['model'] = xgb_model\n",
    "score[\"XGBoost\"][\"Train Score\"] = xgb_model.score(X_train, y_train)\n",
    "score[\"XGBoost\"][\"Validation Score\"] = xgb_model.score(X_valid, y_valid)\n",
    "print(\"XGBoost Train Score: {}\".format(score[\"XGBoost\"][\"Train Score\"]))\n",
    "print(\"XGBoost Validation Score {}\".format(score[\"XGBoost\"][\"Validation Score\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Train Score</th>\n",
       "      <th>Validation Score</th>\n",
       "      <th>model</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Logistic Regression</th>\n",
       "      <td>0.506922</td>\n",
       "      <td>0.536842</td>\n",
       "      <td>LogisticRegressionCV(Cs=10, class_weight=None,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LDA</th>\n",
       "      <td>0.52472</td>\n",
       "      <td>0.547368</td>\n",
       "      <td>LinearDiscriminantAnalysis(n_components=None, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>QDA</th>\n",
       "      <td>0.496374</td>\n",
       "      <td>0.452632</td>\n",
       "      <td>QuadraticDiscriminantAnalysis(priors=None, reg...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Random Forest</th>\n",
       "      <td>0.526697</td>\n",
       "      <td>0.518421</td>\n",
       "      <td>RandomizedSearchCV(cv=5, error_score='raise-de...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>XGBoost</th>\n",
       "      <td>0.539881</td>\n",
       "      <td>0.534211</td>\n",
       "      <td>RandomizedSearchCV(cv=5, error_score='raise-de...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Train Score Validation Score  \\\n",
       "Logistic Regression    0.506922         0.536842   \n",
       "LDA                     0.52472         0.547368   \n",
       "QDA                    0.496374         0.452632   \n",
       "Random Forest          0.526697         0.518421   \n",
       "XGBoost                0.539881         0.534211   \n",
       "\n",
       "                                                                 model  \n",
       "Logistic Regression  LogisticRegressionCV(Cs=10, class_weight=None,...  \n",
       "LDA                  LinearDiscriminantAnalysis(n_components=None, ...  \n",
       "QDA                  QuadraticDiscriminantAnalysis(priors=None, reg...  \n",
       "Random Forest        RandomizedSearchCV(cv=5, error_score='raise-de...  \n",
       "XGBoost              RandomizedSearchCV(cv=5, error_score='raise-de...  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_result = pd.DataFrame(score).T\n",
    "df_result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We choose the final model to be the one with the highest validation score, which is LDA in this case\n"
     ]
    }
   ],
   "source": [
    "model_name = df_result['Validation Score'].astype(float).argmax()\n",
    "print(\"We choose the final model to be the one with the highest validation score,\\\n",
    " which is {} in this case\".format(model_name))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now to predict the test set. Similar to before, we will use three different approaches. For the WC Playoff Model approach, we will still use logistic regression for now. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For the best Model, LDA, the test accuracy is 0.640625 at 90 mins\n",
      "For the best Model, LDA, the test accuracy is 0.671875 at end (Softmax)\n",
      "For the best Model, LDA, the test accuracy is 0.65625 at end (WC Playoff Model)\n"
     ]
    }
   ],
   "source": [
    "wc_model = LogisticRegressionCV(solver = 'lbfgs', max_iter = 5000, cv = 5, multi_class='multinomial').fit(X_wc, y_wc)\n",
    "test_pred = predict_test_data(X_test, df_result.loc[model_name].model)\n",
    "test_pred_playoff = predict_test_data(X_test, df_result.loc[model_name].model, False, wc_model)\n",
    "test_score = accuracy_score(y_test, test_pred)\n",
    "test_score_playoff = accuracy_score(y_test, test_pred_playoff)\n",
    "test_score_no_pk = df_result.loc[model_name].model.score(X_test, y_test_no_pk)\n",
    "print(\"For the best Model, {}, the test accuracy is {} at 90 mins\".format(model_name, test_score_no_pk))\n",
    "print(\"For the best Model, {}, the test accuracy is {} at end (Softmax)\".format(model_name, test_score))\n",
    "print(\"For the best Model, {}, the test accuracy is {} at end (WC Playoff Model)\".format(model_name, test_score_playoff))\n",
    "\n",
    "final_models_score = {}\n",
    "final_models_score[model_name] = {}\n",
    "final_models_score[model_name][\"Train Score\"] = df_result.loc[model_name]['Train Score']\n",
    "final_models_score[model_name][\"Validation Score\"] = df_result.loc[model_name]['Validation Score']\n",
    "final_models_score[model_name][\"Test Score (90 mins)\"] = test_score_no_pk\n",
    "final_models_score[model_name][\"Test Score (Softmax)\"] = test_score\n",
    "final_models_score[model_name][\"Test Score (WC Playoff Model)\"] = test_score_playoff"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Wow! It seems that our model with all the features is a decent improvement to the baseline model for the test set in all three approaches. However, the lower train and validation scores in general is a bit concerning. \n",
    "\n",
    "Like before, random forest seems to perform similarly to the best model, so we will utilize its feature importance again. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "feature_importances = rf_model.best_estimator_.feature_importances_\n",
    "plt.figure(figsize =(12, 6))\n",
    "indices = np.argsort(feature_importances)[::-1]\n",
    "plt.title(\"RF Feature Importances\")\n",
    "plt.bar(range(len(columns)), feature_importances[indices],\n",
    "       color=\"r\", align=\"center\")\n",
    "plt.xticks(range(len(columns)), np.array(columns)[indices], rotation = 90)\n",
    "plt.ylabel('Feature Importances')\n",
    "plt.xlim([-1, len(columns)]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Like before, the ratings of the team are pretty important features. Many of the features we have engineered seem to be decent features as well, which should not be surprising from the EDA. Besides 3 of them, many of the momentum features are near the bottom, and this might be due to the fact that these momentum features are obviously highly correlated with each other, and this may be causing the lower train and validation scores. Many of the features in our feature are highly correlated; we would want to deal with this multicollinearity somehow to see if we can achieve better results. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stacking"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We saw that our models in general performed similarly in terms of train/validation. Why not try stacking the models together? We will stack the logistic regression, LDA, QDA, Random Forest, and XGBoost models."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fit_stack_model(models, X_train, y_train): \n",
    "    predictions = []\n",
    "    for model in models:\n",
    "        predictions.append(model.predict(X_train))\n",
    "        \n",
    "    predictions = np.array(predictions).T\n",
    "    logit = LogisticRegression(C=1000).fit(predictions, y_train)\n",
    "    return logit\n",
    "    \n",
    "def stack_model_predict(models, stack_model, X, test = False):\n",
    "    predictions = []\n",
    "    for model in models:\n",
    "        predictions.append(model.predict(X))        \n",
    "    predictions = np.array(predictions).T\n",
    "    if not test:\n",
    "        return stack_model.predict(predictions)\n",
    "    else:\n",
    "        return stack_model.predict_proba(predictions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stacking Model Train Score: 0.5346077785102176\n",
      "Stacking Model Validation Score: 0.5342105263157895\n"
     ]
    }
   ],
   "source": [
    "models = df_result['model']\n",
    "stack_model = fit_stack_model(models, X_train, y_train)\n",
    "print(\"Stacking Model Train Score: {}\".format(accuracy_score(y_train, stack_model_predict(models, stack_model,\n",
    "                                                                                         X_train))))\n",
    "print(\"Stacking Model Validation Score: {}\".format(accuracy_score(y_valid, stack_model_predict(models, stack_model,\n",
    "                                                                                         X_valid))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stacking Model Test Score at 90 mins: 0.625\n",
      "Stacking Model Test Score at end (Softmax): 0.65625\n",
      "Stacking Model Test Score at end (WC Playoff Model): 0.65625\n"
     ]
    }
   ],
   "source": [
    "stack_model_test_pred_prob = stack_model_predict(models, stack_model, X_test, True)\n",
    "stack_model_test_pred = [np.where(np.argsort(val) == 1)[0][0]-1 if (i >= 48) & (np.argmax(val) == 1)\n",
    "                       else np.argmax(val)-1 for i, val in enumerate(stack_model_test_pred_prob)]\n",
    "stack_model_test_pred_wc_model = [np.argmax(val) - 1 for val in stack_model_test_pred_prob[:48]] +\\\n",
    "                                list(wc_model.predict(X_test[48:]))\n",
    "                                    \n",
    "\n",
    "stack_model_test_acc = accuracy_score(y_test, stack_model_test_pred)\n",
    "stack_model_test_acc_no_pk = accuracy_score(y_test_no_pk, stack_model_predict(models, stack_model, X_test))\n",
    "stack_model_test_acc_wc_model = accuracy_score(y_test, stack_model_test_pred_wc_model)\n",
    "\n",
    "\n",
    "print(\"Stacking Model Test Score at 90 mins: {}\".format(stack_model_test_acc_no_pk))\n",
    "print(\"Stacking Model Test Score at end (Softmax): {}\".format(stack_model_test_acc))\n",
    "print(\"Stacking Model Test Score at end (WC Playoff Model): {}\".format(stack_model_test_acc_wc_model))\n",
    "\n",
    "final_models_score[\"Stacking\"] = {}\n",
    "final_models_score[\"Stacking\"][\"Train Score\"] = accuracy_score(y_train, stack_model_predict(models, stack_model,\n",
    "                                                                                         X_train))\n",
    "final_models_score[\"Stacking\"][\"Validation Score\"] = accuracy_score(y_valid, stack_model_predict(models, stack_model,\n",
    "                                                                                         X_valid))\n",
    "final_models_score[\"Stacking\"][\"Test Score (90 mins)\"] = stack_model_test_acc_no_pk\n",
    "final_models_score[\"Stacking\"][\"Test Score (Softmax)\"] = stack_model_test_acc\n",
    "final_models_score[\"Stacking\"][\"Test Score (WC Playoff Model)\"] = stack_model_test_acc_wc_model\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It seems that stacking in this case did not really help that much. The test accuarcies are quite low, although still higher than those of the baseline model.\n",
    "\n",
    "As mentioned before, we are a bit concerned about the fact that our features are highly correlated, which potentially affects our predictions. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Principal Component Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Principal Component Analysis (PCA) is a way to reduce the dimensionality of dataset by summarizing the variation in our data into a set of new predictors called principal components. These principal components are linear combinations of our original predictors. By selecting the top few principal components, we are projecting our dataset into the space defined by these components. This means that we are projecting our dataset onto a space of smaller dimensionality. Importantly, this will help us reduce the multicollinearity that might be affecting our predictions. Each principal component is constructed such that they are orthogonal with each other. Nonetheless, we understand that this will limit the interpretability of our coefficients.\n",
    "\n",
    "Principal Component Regression (PCR) is basically using the new predictors of reduced dimensionality in a regression problem. In this problem, we inputed the new principal components into our standard logistic regression. In order to decide the number of principal components to keep, we cross-validated the number of principal components that gives us the best validation accuracy. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# scale data\n",
    "scaler = StandardScaler()\n",
    "scaler.fit(X_train)\n",
    "X_train_scaled = scaler.transform(X_train)\n",
    "X_valid_scaled = scaler.transform(X_valid)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "X_wc_scaled = scaler.transform(X_wc)\n",
    "\n",
    "# PCA on data\n",
    "pca = PCA().fit(X_train_scaled)\n",
    "X_train_pca = pca.transform(X_train_scaled)\n",
    "X_valid_pca = pca.transform(X_valid_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "pcr_train_score = []\n",
    "pcr_valid_score = []\n",
    "pcr_wc_score = []\n",
    "\n",
    "for i in np.arange(1, X_train.shape[1]):\n",
    "    pca_cv = PCA(n_components=i).fit(X_train_scaled)\n",
    "    X_train_pca_cv = pca_cv.transform(X_train_scaled)\n",
    "    X_valid_pca_cv = pca_cv.transform(X_valid_scaled)\n",
    "    X_test_pca_cv = pca_cv.transform(X_test_scaled)\n",
    "    X_wc_pca = pca_cv.transform(X_wc_scaled)\n",
    "    pcr_cv_mod = LogisticRegressionCV(solver = 'lbfgs', \n",
    "                                      max_iter = 5000, \n",
    "                                      cv = 5, \n",
    "                                      multi_class='multinomial').fit(X_train_pca_cv, y_train)\n",
    "    pcr_train_score.append(pcr_cv_mod.score(X_train_pca_cv, y_train))\n",
    "    pcr_valid_score.append(pcr_cv_mod.score(X_valid_pca_cv, y_valid))\n",
    "    \n",
    "    #X_wc has very few samples\n",
    "    if i < X_wc.shape[0]:\n",
    "        pcr_wc_mod = LogisticRegressionCV(solver = 'lbfgs', \n",
    "                                          max_iter = 5000, \n",
    "                                          cv = 5, \n",
    "                                          multi_class='multinomial').fit(X_wc_pca, y_wc)\n",
    "        pcr_wc_score.append(pcr_wc_mod.score(X_wc_pca, y_wc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "34"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_wc_pca.shape[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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fDmzZs3i2WefZfXq1Rw9epRRo0bx1FNPAdC7d2/GjRtHx44dCQ8P58477+THH3+kWrVqfP/999StW5cnn3yS8PBw7rvvPnr37k3v3r1ZsGABSUlJTJo0iV69epGamsoNN9xAdHQ07du3Z+vWrUycOJEuXbqclL+pU6cybtw4Ro4cyf79+4mKigJg9uzZ/Oc//yEnJ4fIyEjmzZtHcnIyd999N6tXr8YYw3PPPcfQoUMJDw/n8OHDAEybNo358+czceJErrvuOiIjI1m9ejU9evTg8ssv5/777yc9PZ1q1arx6aef0qpVK7Kzs3n44Yf5+eef8fPz484776RFixZMnDiRr776CoAff/yRSZMmMX369JJ+hCWiwcKhkwgq5XsbN25k0qRJvP/++wC88sor1KlTh+zsbPr3788VV1xB+/btTzgmKSmJvn378sorr/DAAw/wySef8GVvER4AABSXSURBVNhjj52UtoiwYsUKZs6cyXPPPcdPP/3Eu+++S1RUFN988w1r166la9eubvO1c+dODh06RLdu3bjiiiuYPn069957L/v37+euu+5iyZIlNGnShMTERMCWmCIiIli/fj0icixAFGbbtm388ssv+Pn5kZSUxNKlS/H39+enn37iySef5Msvv2TChAnExsaydu1a/P39SUxMpFatWtx7770kJCQQFhbGpEmTuOmmm4r71peaBgtHQkoGxkDtahosVOVRkhKAL7Vo0YIePXocuz916lQ+/vhjsrOziY2NZePGjScFi6pVq3LhhRcC0K1bN5YsWeI27csvv/zYPjt37gRg6dKlPProowB07tyZDh3cvx9Tp05l1KhRAFx11VWMHTuWe++9l2XLltG/f3+aNGkCQJ06dQCYP38+3333HWB7GdWuXZvs7OxCX/vIkSOPVbsdPnyYG264gW3btp2wz/z587nvvvvw9/c/4fmuueYapkyZwrXXXsuqVauYOnVqoc/lCxosHPGpmdSpFoS/n3Y5VMpXQkJCjv2/detW3n77bVasWEGtWrW47rrr3I4DCAo6fgHn7+9f4Em5SpUqJ+0jIh7la+rUqSQkJPDZZ58BEBsby44dOxARt11O3W338/M74fnyvxbX1/7EE08wePBgxowZQ3R0NEOGDCkwXYCbb76ZESNGADBq1KhjwaQsaW8oR0KKrr2tVFk6cuQI1atXp0aN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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.arange(1,len(pcr_train_score)+1), pcr_train_score, label='Training Accuracy')\n",
    "plt.plot(np.arange(1,len(pcr_valid_score)+1), pcr_valid_score, label='Validation Accuracy')\n",
    "\n",
    "\n",
    "plt.title('Accuracy for Different PCA Components')\n",
    "plt.xlabel('PCA Components')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Validation Accuracy Number of Components: 3\n"
     ]
    }
   ],
   "source": [
    "pca_best_com = np.argmax(pcr_valid_score)+1\n",
    "print('Best Validation Accuracy Number of Components: {}'.format(pca_best_com))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# best mod with highest validation accuracy\n",
    "pca_best = PCA(n_components=pca_best_com).fit(X_train_scaled)\n",
    "X_train_pca_best = pca_best.transform(X_train_scaled)\n",
    "X_valid_pca_best = pca_best.transform(X_valid_scaled)\n",
    "\n",
    "X_wc_pca_best = pca_best.transform(X_wc_scaled)\n",
    "\n",
    "\n",
    "# fit models\n",
    "pcr_best_mod = LogisticRegressionCV(solver = 'lbfgs', \n",
    "                                    max_iter = 5000, \n",
    "                                    cv = 5, \n",
    "                                    multi_class='multinomial').fit(X_train_pca_best, y_train)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PCR (Best) Train Score: 0.5042847725774555\n",
      "PCR (Best) Validation Score: 0.5473684210526316\n"
     ]
    }
   ],
   "source": [
    "# Best Validation Accuracy\n",
    "score[\"pcr_best\"] = {}\n",
    "score[\"pcr_best\"][\"model\"] = pcr_best_mod\n",
    "score[\"pcr_best\"][\"Train Score\"] = pcr_best_mod.score(X_train_pca_best, y_train)\n",
    "score[\"pcr_best\"][\"Validation Score\"] = pcr_best_mod.score(X_valid_pca_best, y_valid)\n",
    "print(\"PCR (Best) Train Score: {}\".format(score[\"pcr_best\"][\"Train Score\"]))\n",
    "print(\"PCR (Best) Validation Score: {}\".format(score[\"pcr_best\"][\"Validation Score\"]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PCR (Best) Test Score at 90 mins: 0.5625\n",
      "PCR (Best) Test Score at end (Softmax): 0.578125\n",
      "PCR (Best) Test Score at end (WC Playoffs Model): 0.609375\n"
     ]
    }
   ],
   "source": [
    "# test set\n",
    "# For third approach, find number of components that maximize the training score of the WC Playoff model.\n",
    "pca_best_com_wc = np.argmax(pcr_wc_score)+1\n",
    "pca_best_wc = PCA(n_components=pca_best_com_wc).fit(X_wc_scaled)\n",
    "X_wc_pca_best = pca_best_wc.transform(X_wc_scaled)\n",
    "\n",
    "pca_wc_mod = LogisticRegressionCV(solver = 'lbfgs', \n",
    "                                    max_iter = 5000, \n",
    "                                    cv = 5, \n",
    "                                    multi_class='multinomial').fit(X_wc_pca_best, y_wc)\n",
    "X_test_pca_best = pca_best.transform(X_test_scaled)\n",
    "X_test_pca_best_wc = pca_best_wc.transform(X_test_scaled)\n",
    "pcr_best_test_pred = predict_test_data(X_test_pca_best, pcr_best_mod)\n",
    "pcr_best_test_pred_wc_model = list(pcr_best_mod.predict(X_test_pca_best[:48])) + list(pca_wc_mod.predict(X_test_pca_best_wc[48:]))\n",
    "pcr_best_test_acc = accuracy_score(y_test, pcr_best_test_pred)\n",
    "pcr_best_test_acc_no_pk = pcr_best_mod.score(X_test_pca_best, y_test_no_pk)\n",
    "pcr_best_test_acc_wc_model = accuracy_score(y_test, pcr_best_test_pred_wc_model)\n",
    "\n",
    "print(\"PCR (Best) Test Score at 90 mins: {}\".format(pcr_best_test_acc_no_pk))\n",
    "print(\"PCR (Best) Test Score at end (Softmax): {}\".format(pcr_best_test_acc))\n",
    "print(\"PCR (Best) Test Score at end (WC Playoffs Model): {}\".format(pcr_best_test_acc_wc_model))\n",
    "\n",
    "\n",
    "final_models_score[\"PCR\"] = {}\n",
    "final_models_score[\"PCR\"][\"Train Score\"] = score['pcr_best']['Train Score']\n",
    "final_models_score[\"PCR\"][\"Validation Score\"] = score['pcr_best']['Validation Score']\n",
    "final_models_score[\"PCR\"][\"Test Score (90 mins)\"] = pcr_best_test_acc_no_pk\n",
    "final_models_score[\"PCR\"][\"Test Score (Softmax)\"] = pcr_best_test_acc\n",
    "final_models_score[\"PCR\"][\"Test Score (WC Playoff Model)\"] = pcr_best_test_acc_wc_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this case, PCR was not a good option. The test accuracy decreased quite significantly. We may need to take into the account the outcome as well when we reduce the dimension of our feature set."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Least Squares Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Another way that can help us deal with the issues of multicollinearity in our dataset is Partial Least Squares Regression (PLSR). Similar to PCA, PLSR involves projecting the predictors onto orthogonal components. However, the PLSR components are constructed such that they not only approximate the predictors, but are also well correlated with the response. As such, we assume that both the predictors and the response are functions of (reduced) principal components. In this problem, our response variable is a multi-class categorical variable. As such, we could use the PLS2 algorithm which simultaneously decomposes on the multi-class variable directly. We could also use the PLS1 algorithm on each category in our response variable separately. \n",
    "\n",
    "To demonstrate how the Partial Least Squares algorithms works, we have included a pseudo-code for PLS1:\n",
    "\n",
    "Set $X_0 = X$, and $y_0 = y$\n",
    "\n",
    "for $h = 1, 2, ... r$ do (where r is the dimension of the predictors)\n",
    "\n",
    "$\\hspace{1cm} \\mathbf{w_h} = \\mathbf{X^T_{h-1}y_{h-1}/y^T_{h-1}y_{h-1}}$ (regress predictors $x_j$ on response $y$)\n",
    "\n",
    "$\\hspace{1cm} ||\\mathbf{w_h}|| = 1$ (normalize)\n",
    "\n",
    "$\\hspace{1cm} \\mathbf{z_h} = \\mathbf{X_{h-1}w_h/w^T_hw_h}$ (regress predictors $x_j$ on weights $w_h$)\n",
    "\n",
    "$\\hspace{1cm} \\mathbf{p_h} = \\mathbf{X^T_{h-1}z_h/z^T_hz_h}$ (regress predictors $x_j$ on components $z_h$)\n",
    "\n",
    "$\\hspace{1cm} \\mathbf{X_h} = \\mathbf{X_{h-1} - z_hp^T_h}$ (deflate $X_{h-1}$)\n",
    "\n",
    "$\\hspace{1cm} d_h = \\mathbf{y^T_hz_h/z^T_hz_h}$ (regress response $y_h$ onto components $z_h$)\n",
    "\n",
    "$\\hspace{1cm} \\mathbf{y_h} = \\mathbf{y_{h-1} - d_hz_h}$ (deflate $y_{h-1}$)\n",
    "\n",
    "end for\n",
    "\n",
    "The PLS2 algorithm is just an extension for a multi-dimensional response variable.\n",
    "\n",
    "Importantly, PLS selects components which gives us the greatest reduction in the covariance of our predictors and response. If we represent our components as $\\mathbf{z}$, and the response as $\\mathbf{y}$, it can be shown that PLSR optimizes with respect to the weights $\\mathbf{w}$\n",
    "\n",
    "$$ \\arg\\max_{\\mathbf{w}} cor^2(\\mathbf{y, z})var(\\mathbf{y})var(\\mathbf{z})$$\n",
    "\n",
    "It can thus be seen that PLSR tries to maximize the correlation between the components and the response whilst trying to maximize the variance captured by the components. \n",
    "\n",
    "This not only allows us to resolve the multicollinearity issues through the creation of orthogonal components just as in PCR, but also allows us to create components that are correlated with the response. It is likely that this might perform even better than PCR."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "lb = LabelBinarizer()\n",
    "y_train_lb = lb.fit_transform(y_train)\n",
    "y_valid_lb = lb.fit_transform(y_valid)\n",
    "y_wc_lb = lb.fit_transform(y_wc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "plsda1_train_score = []\n",
    "plsda1_valid_score = []\n",
    "\n",
    "\n",
    "# PLS1\n",
    "for i in np.arange(1, X_train.shape[1]):\n",
    "    # initialize empty array\n",
    "    train_pred = np.empty(y_train_lb.shape)\n",
    "    valid_pred = np.empty(y_valid_lb.shape)\n",
    "    \n",
    "    plsda1_mod = PLSRegression(n_components=i, scale=False) \n",
    "    plsda1_mod.fit(X_train_scaled, y_train_lb[:,0])\n",
    "    train_pred[:,0] = plsda1_mod.predict(X_train_scaled).ravel()\n",
    "    valid_pred[:,0] = plsda1_mod.predict(X_valid_scaled).ravel()\n",
    "    plsda1_mod.fit(X_train_scaled, y_train_lb[:,1])\n",
    "    train_pred[:,1] = plsda1_mod.predict(X_train_scaled).ravel()\n",
    "    valid_pred[:,1] = plsda1_mod.predict(X_valid_scaled).ravel()\n",
    "    plsda1_mod.fit(X_train_scaled, y_train_lb[:,2])\n",
    "    train_pred[:,2] = plsda1_mod.predict(X_train_scaled).ravel()\n",
    "    valid_pred[:,2] = plsda1_mod.predict(X_valid_scaled).ravel()\n",
    "\n",
    "    \n",
    "    plsda1_train_score.append(accuracy_score(y_train, np.argmax(train_pred, axis=1) - 1))\n",
    "    plsda1_valid_score.append(accuracy_score(y_valid, np.argmax(valid_pred, axis=1) - 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.arange(1,len(plsda1_train_score)+1), plsda1_train_score, label='Training Accuracy')\n",
    "plt.plot(np.arange(1,len(plsda1_valid_score)+1), plsda1_valid_score, label='Validation Accuracy')\n",
    "\n",
    "plt.title('Accuracy for Different PLS1-DA Components')\n",
    "plt.xlabel('PLS1-DA Components')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Validation Accuracy Number of Components: 16\n"
     ]
    }
   ],
   "source": [
    "plsda1_best_com = np.argmax(plsda1_valid_score)+1\n",
    "print('Best Validation Accuracy Number of Components: {}'.format(plsda1_best_com))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "# check test accuracy\n",
    "# initialize arrays\n",
    "best_train_pred = np.empty(y_train_lb.shape)\n",
    "best_valid_pred = np.empty(y_valid_lb.shape)\n",
    "best_test_pred = np.empty((y_test.shape[0],3))\n",
    "\n",
    "# fit model\n",
    "plsda1_best_mod = PLSRegression(n_components=plsda1_best_com, scale=False) \n",
    "\n",
    "# predict\n",
    "plsda1_best_mod.fit(X_train_scaled, y_train_lb[:,0])\n",
    "best_train_pred[:,0] = plsda1_best_mod.predict(X_train_scaled).ravel()\n",
    "best_valid_pred[:,0] = plsda1_best_mod.predict(X_valid_scaled).ravel()\n",
    "best_test_pred[:,0] = plsda1_best_mod.predict(X_test_scaled).ravel()\n",
    "\n",
    "# predict\n",
    "plsda1_best_mod.fit(X_train_scaled, y_train_lb[:,1])\n",
    "best_train_pred[:,1] = plsda1_best_mod.predict(X_train_scaled).ravel()\n",
    "best_valid_pred[:,1] = plsda1_best_mod.predict(X_valid_scaled).ravel()\n",
    "best_test_pred[:,1] = plsda1_best_mod.predict(X_test_scaled).ravel()\n",
    "\n",
    "# predict\n",
    "plsda1_best_mod.fit(X_train_scaled, y_train_lb[:,2])\n",
    "best_train_pred[:,2] = plsda1_best_mod.predict(X_train_scaled).ravel()\n",
    "best_valid_pred[:,2] = plsda1_best_mod.predict(X_valid_scaled).ravel()\n",
    "best_test_pred[:,2] = plsda1_best_mod.predict(X_test_scaled).ravel()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PLS1-DA (Best) Train Score: 0.5227422544495716\n",
      "PLS1-DA (Best) Validation Score: 0.5552631578947368\n"
     ]
    }
   ],
   "source": [
    "# Best Validation Accuracy\n",
    "score[\"plsda1_best\"] = {}\n",
    "score[\"plsda1_best\"][\"model\"] = plsda1_best_mod\n",
    "score[\"plsda1_best\"][\"Train Score\"] = accuracy_score(y_train, np.argmax(best_train_pred, axis=1) - 1)\n",
    "score[\"plsda1_best\"][\"Validation Score\"] = accuracy_score(y_valid, np.argmax(best_valid_pred, axis=1) - 1)\n",
    "print(\"PLS1-DA (Best) Train Score: {}\".format(score[\"plsda1_best\"][\"Train Score\"]))\n",
    "print(\"PLS1-DA (Best) Validation Score: {}\".format(score[\"plsda1_best\"][\"Validation Score\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "plsda2_train_score = []\n",
    "plsda2_valid_score = []\n",
    "plsda_wc_score = []\n",
    "\n",
    "# PLS2\n",
    "for i in np.arange(1, X_train.shape[1]):\n",
    "    plsda2_mod = PLSRegression(n_components=i, scale=False) \n",
    "    plsda2_mod.fit(X_train_scaled, y_train_lb)\n",
    "\n",
    "    plsda2_train_score.append(accuracy_score(y_train, np.argmax(plsda2_mod.predict(X_train_scaled), axis=1) - 1))\n",
    "    plsda2_valid_score.append(accuracy_score(y_valid, np.argmax(plsda2_mod.predict(X_valid_scaled), axis=1) - 1))\n",
    "    \n",
    "    if i < X_wc.shape[0]:\n",
    "        #When there are only two labels, >0 means class 1 have higher probability\n",
    "        plsda_mod_wc = PLSRegression(n_components=i, scale=False) \n",
    "        plsda_mod_wc.fit(X_wc_scaled, y_wc_lb)\n",
    "        plsda_wc_score.append(accuracy_score(y_wc, list(np.where(plsda_mod_wc.predict(X_wc_scaled) > 0, 1, -1))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.arange(1,len(plsda2_train_score)+1), plsda2_train_score, label='Training Accuracy')\n",
    "plt.plot(np.arange(1,len(plsda2_valid_score)+1), plsda2_valid_score, label='Validation Accuracy')\n",
    "\n",
    "plt.title('Accuracy for Different PLS2-DA Components')\n",
    "plt.xlabel('PLS2-DA Components')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Validation Accuracy Number of Components: 9\n"
     ]
    }
   ],
   "source": [
    "plsda2_best_com = np.argmax(plsda2_valid_score)+1\n",
    "print('Best Validation Accuracy Number of Components: {}'.format(plsda2_best_com))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "plsda2_best_mod = PLSRegression(n_components=plsda2_best_com, scale=False) \n",
    "plsda2_best_mod.fit(X_train_scaled, y_train_lb);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PLS2-DA (Best) Train Score: 0.5181278839815425\n",
      "PLS2-DA (Best) Validation Score: 0.5526315789473685\n"
     ]
    }
   ],
   "source": [
    "# Best Validation Accuracy\n",
    "score[\"plsda2_best\"] = {}\n",
    "score[\"plsda2_best\"][\"model\"] = plsda2_best_mod\n",
    "score[\"plsda2_best\"][\"Train Score\"] = accuracy_score(y_train, np.argmax(plsda2_best_mod.predict(X_train_scaled), axis=1) - 1)\n",
    "score[\"plsda2_best\"][\"Validation Score\"] = accuracy_score(y_valid, np.argmax(plsda2_best_mod.predict(X_valid_scaled), axis=1) - 1)\n",
    "print(\"PLS2-DA (Best) Train Score: {}\".format(score[\"plsda2_best\"][\"Train Score\"]))\n",
    "print(\"PLS2-DA (Best) Validation Score: {}\".format(score[\"plsda2_best\"][\"Validation Score\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the case of binary labels, PLS1-DA and PLS2-DA are the same, so we will look at the third approach in PLS2-DA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PLS1-DA (Best) Test Score at 90 mins: 0.640625\n",
      "PLS1-DA (Best) Test Score at end (Softmax): 0.6875\n",
      "PLS2-DA (Best) Test Score at 90 mins: 0.59375\n",
      "PLS2-DA (Best) Test Score at end (Softmax): 0.625\n",
      "PLS1-DA/PLS2-DA (Best) Test Score at end (WC Playoffs Model): 0.65625\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "plsda2_best_com_wc = np.argmax(plsda_wc_score)+1\n",
    "\n",
    "\n",
    "plsda2_wc_mod = PLSRegression(n_components=plsda2_best_com_wc, scale=False).fit(X_wc_scaled, y_wc_lb)\n",
    "\n",
    "plsda2_best_test_pred = [np.where(np.argsort(val) == 1)[0][0]-1 if (i >= 48) & (np.argmax(val) == 1)\n",
    "                       else np.argmax(val)-1 for i, val in enumerate(plsda2_best_mod.predict(X_test_scaled))]\n",
    "\n",
    "plsda2_best_test_pred_wc = [np.argmax(val)-1 for val in plsda2_best_mod.predict(X_test_scaled[:48])] +\\\n",
    "                        list(np.where(plsda2_wc_mod.predict(X_test_scaled[48:]) > 0, 1, -1))\n",
    "\n",
    "plsda1_best_test_pred = [np.where(np.argsort(val) == 1)[0][0]-1 if (i >= 48) & (np.argmax(val) == 1) \n",
    "                       else np.argmax(val)-1 for i, val in enumerate(best_test_pred)]\n",
    "\n",
    "print(\"PLS1-DA (Best) Test Score at 90 mins: {}\".format(accuracy_score(y_test_no_pk, np.argmax(best_test_pred, axis=1) - 1)))\n",
    "print(\"PLS1-DA (Best) Test Score at end (Softmax): {}\".format(accuracy_score(y_test, plsda1_best_test_pred)))\n",
    "\n",
    "print(\"PLS2-DA (Best) Test Score at 90 mins: {}\".format(accuracy_score(y_test_no_pk, np.argmax(plsda2_best_mod.predict(X_test_scaled), axis=1) - 1)))\n",
    "print(\"PLS2-DA (Best) Test Score at end (Softmax): {}\".format(accuracy_score(y_test, plsda2_best_test_pred)))\n",
    "print(\"PLS1-DA/PLS2-DA (Best) Test Score at end (WC Playoffs Model): {}\".format(accuracy_score(y_test, plsda2_best_test_pred_wc)))\n",
    "\n",
    "final_models_score[\"PLS1-DA\"] = {}\n",
    "final_models_score[\"PLS1-DA\"][\"Train Score\"] = score['plsda1_best']['Train Score']\n",
    "final_models_score[\"PLS1-DA\"][\"Validation Score\"] = score['plsda1_best']['Validation Score']\n",
    "final_models_score[\"PLS1-DA\"][\"Test Score (90 mins)\"] = accuracy_score(y_test_no_pk, np.argmax(best_test_pred, axis=1) - 1)\n",
    "final_models_score[\"PLS1-DA\"][\"Test Score (Softmax)\"] = accuracy_score(y_test, plsda1_best_test_pred)\n",
    "#Same as PLS2-DA as mentioned\n",
    "final_models_score[\"PLS1-DA\"][\"Test Score (WC Playoff Model)\"] = accuracy_score(y_test, plsda2_best_test_pred_wc)\n",
    "\n",
    "final_models_score[\"PLS2-DA\"] = {}\n",
    "final_models_score[\"PLS2-DA\"][\"Train Score\"] = score['plsda2_best']['Train Score']\n",
    "final_models_score[\"PLS2-DA\"][\"Validation Score\"] = score['plsda2_best']['Validation Score']\n",
    "final_models_score[\"PLS2-DA\"][\"Test Score (90 mins)\"] = accuracy_score(y_test_no_pk, np.argmax(plsda2_best_mod.predict(X_test_scaled), axis=1) - 1)\n",
    "final_models_score[\"PLS2-DA\"][\"Test Score (Softmax)\"] = accuracy_score(y_test, plsda2_best_test_pred)\n",
    "final_models_score[\"PLS2-DA\"][\"Test Score (WC Playoff Model)\"] = accuracy_score(y_test, plsda2_best_test_pred_wc)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compared to the full model,  we do not see much change in the PLS1-DA model on the test set while we see a decrease in performance of PLS2-DA on the test set, although PLS1-DA does perform better in the second approach than the full model does; thus PLS1-DA is the best model we have seen so far! What's more important is that the validation scores for PLS1-DA were higher than those in the full model. It is likely that multicollinearity was causing the decrease in our validation scores.\n",
    "\n",
    "Now, suppose we don't actually know anything about the test set. Which model would we have actually chosen? Like before, we can only look at the validation scores. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Train Score</th>\n",
       "      <th>Validation Score</th>\n",
       "      <th>Test Score (90 mins)</th>\n",
       "      <th>Test Score (Softmax)</th>\n",
       "      <th>Test Score (WC Playoff Model)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>LDA</th>\n",
       "      <td>0.524720</td>\n",
       "      <td>0.547368</td>\n",
       "      <td>0.640625</td>\n",
       "      <td>0.671875</td>\n",
       "      <td>0.656250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Stacking</th>\n",
       "      <td>0.534608</td>\n",
       "      <td>0.534211</td>\n",
       "      <td>0.625000</td>\n",
       "      <td>0.656250</td>\n",
       "      <td>0.656250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PCR</th>\n",
       "      <td>0.504285</td>\n",
       "      <td>0.547368</td>\n",
       "      <td>0.562500</td>\n",
       "      <td>0.578125</td>\n",
       "      <td>0.609375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PLS1-DA</th>\n",
       "      <td>0.522742</td>\n",
       "      <td>0.555263</td>\n",
       "      <td>0.640625</td>\n",
       "      <td>0.687500</td>\n",
       "      <td>0.656250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PLS2-DA</th>\n",
       "      <td>0.518128</td>\n",
       "      <td>0.552632</td>\n",
       "      <td>0.593750</td>\n",
       "      <td>0.625000</td>\n",
       "      <td>0.656250</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Train Score  Validation Score  Test Score (90 mins)  \\\n",
       "LDA          0.524720          0.547368              0.640625   \n",
       "Stacking     0.534608          0.534211              0.625000   \n",
       "PCR          0.504285          0.547368              0.562500   \n",
       "PLS1-DA      0.522742          0.555263              0.640625   \n",
       "PLS2-DA      0.518128          0.552632              0.593750   \n",
       "\n",
       "          Test Score (Softmax)  Test Score (WC Playoff Model)  \n",
       "LDA                   0.671875                       0.656250  \n",
       "Stacking              0.656250                       0.656250  \n",
       "PCR                   0.578125                       0.609375  \n",
       "PLS1-DA               0.687500                       0.656250  \n",
       "PLS2-DA               0.625000                       0.656250  "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_df_result = pd.DataFrame(final_models_score).T\n",
    "final_df_result = final_df_result[['Train Score', 'Validation Score', 'Test Score (90 mins)', 'Test Score (Softmax)',\n",
    "                                  'Test Score (WC Playoff Model)']]\n",
    "final_df_result"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on validation scores, we would have chosen PLS1-DA, the best model!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Combine with baseline model results and save to csv\n",
    "baseline_results = pd.read_csv('baseline_model_results.csv')\n",
    "final_df_result['Model Name'] = final_df_result.index\n",
    "all_model_results = baseline_results.append(final_df_result.reset_index(drop = True)).reset_index(drop = True)\n",
    "all_model_results = all_model_results[['Model Name', 'Train Score', 'Validation Score', 'Test Score (90 mins)', 'Test Score (Softmax)',\n",
    "                                  'Test Score (WC Playoff Model)']]\n",
    "all_model_results.to_csv('all_model_results.csv', index = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's see the confusion matrices for our best model, PLS1-DA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "#https://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html#sphx-glr-auto-examples-model-selection-plot-confusion-matrix-py\n",
    "def plot_confusion_matrix(cm, classes, ax,\n",
    "                          normalize=False,\n",
    "                          title='Confusion matrix',\n",
    "                          cmap=plt.cm.Blues):\n",
    "    \"\"\"\n",
    "    This function prints and plots the confusion matrix.\n",
    "    Normalization can be applied by setting `normalize=True`.\n",
    "    \"\"\"\n",
    "    if normalize:\n",
    "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "    ax.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "    ax.set_title(title)\n",
    "    tick_marks = np.arange(len(classes))\n",
    "    ax.set_xticks(tick_marks)\n",
    "    ax.set_xticklabels(classes, rotation=45)\n",
    "    ax.set_yticks(tick_marks)\n",
    "    ax.set_yticklabels(classes)\n",
    "\n",
    "    fmt = '.2f' if normalize else 'd'\n",
    "    thresh = cm.max() / 2.\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "        ax.text(j, i, format(cm[i, j], fmt),\n",
    "                 horizontalalignment=\"center\",\n",
    "                 color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "\n",
    "    ax.set_ylabel('True label')\n",
    "    ax.set_xlabel('Predicted label')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.set_printoptions(precision=2)\n",
    "\n",
    "\n",
    "train_cm = confusion_matrix(y_train, np.argmax(best_train_pred, axis=1) - 1)\n",
    "test_90mins_cm =  confusion_matrix(y_test_no_pk, np.argmax(best_test_pred, axis=1) - 1)\n",
    "test_cm = confusion_matrix(y_test, plsda1_best_test_pred)\n",
    "test_wc_cm =  confusion_matrix(y_test, plsda2_best_test_pred_wc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1008x864 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = plt.subplots(2, 2, figsize = (14, 12))\n",
    "plot_confusion_matrix(train_cm, ['Home Loss', 'Draw', 'Home Win'], axs[0,0], True, 'Train')\n",
    "plot_confusion_matrix(test_90mins_cm, ['Home Loss', 'Draw', 'Home Win'], axs[0,1], True, 'Test (90 Mins)')\n",
    "plot_confusion_matrix(test_cm, ['Home Loss', 'Draw', 'Home Win'], axs[1,0], True, 'Test (Softmax)')\n",
    "plot_confusion_matrix(test_wc_cm, ['Home Loss', 'Draw', 'Home Win'], axs[1,1], True, 'Test (WC Playoff Model)')\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The model is actually predicting some draws now for the training set and test set, although still very little. As mentioned before, it is just very hard to predict draws, but this is definitely an improvement compared to the baseline model. \n",
    "\n",
    "Compared to the baseline model, it seems that the model is better in predicting when \"home\" team loses in the test set in all three approaches. This might be due to some bias of how we feature engineer. Since none of us really were experts in soccer, we chose features that we observed from the World Cup alone, so these features might be biased toward the test set. \n",
    "\n",
    "The Softmax approach had higher home loss and home win accuracies than the WC Playoff Model approach; this might be due to the small training set for the playoff matches, so we could just be overfitting to the traing set. As mentioned in the baseline model, we cannot really compare the confusion matrices of the three approaches to the test set, as the true labels between the 90 minutes approach are different from those than the true labels in the other two approaches. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
