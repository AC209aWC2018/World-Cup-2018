{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [],
   "source": [
    "european_matches = pd.read_csv('data/cleaned/european_matches.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>home_win</th>\n",
       "      <th>home_player_1_overall_rating</th>\n",
       "      <th>home_player_1_potential</th>\n",
       "      <th>home_player_1_preferred_foot</th>\n",
       "      <th>home_player_1_attacking_work_rate</th>\n",
       "      <th>home_player_1_defensive_work_rate</th>\n",
       "      <th>home_player_1_crossing</th>\n",
       "      <th>home_player_1_finishing</th>\n",
       "      <th>home_player_1_heading_accuracy</th>\n",
       "      <th>...</th>\n",
       "      <th>wins_past_1_games</th>\n",
       "      <th>not_enough_past_games_1</th>\n",
       "      <th>wins_past_2_games</th>\n",
       "      <th>not_enough_past_games_2</th>\n",
       "      <th>wins_past_3_games</th>\n",
       "      <th>not_enough_past_games_3</th>\n",
       "      <th>wins_past_4_games</th>\n",
       "      <th>not_enough_past_games_4</th>\n",
       "      <th>wins_past_5_games</th>\n",
       "      <th>not_enough_past_games_5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2008-08-17 00:00:00</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2008-08-16 00:00:00</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2008-08-16 00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2008-08-17 00:00:00</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2008-08-16 00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 868 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  date  home_win  home_player_1_overall_rating  \\\n",
       "0  2008-08-17 00:00:00         2                           NaN   \n",
       "1  2008-08-16 00:00:00         2                           NaN   \n",
       "2  2008-08-16 00:00:00         0                           NaN   \n",
       "3  2008-08-17 00:00:00         1                           NaN   \n",
       "4  2008-08-16 00:00:00         0                           NaN   \n",
       "\n",
       "   home_player_1_potential home_player_1_preferred_foot  \\\n",
       "0                      NaN                          NaN   \n",
       "1                      NaN                          NaN   \n",
       "2                      NaN                          NaN   \n",
       "3                      NaN                          NaN   \n",
       "4                      NaN                          NaN   \n",
       "\n",
       "  home_player_1_attacking_work_rate home_player_1_defensive_work_rate  \\\n",
       "0                               NaN                               NaN   \n",
       "1                               NaN                               NaN   \n",
       "2                               NaN                               NaN   \n",
       "3                               NaN                               NaN   \n",
       "4                               NaN                               NaN   \n",
       "\n",
       "   home_player_1_crossing  home_player_1_finishing  \\\n",
       "0                     NaN                      NaN   \n",
       "1                     NaN                      NaN   \n",
       "2                     NaN                      NaN   \n",
       "3                     NaN                      NaN   \n",
       "4                     NaN                      NaN   \n",
       "\n",
       "   home_player_1_heading_accuracy           ...             wins_past_1_games  \\\n",
       "0                             NaN           ...                             0   \n",
       "1                             NaN           ...                             0   \n",
       "2                             NaN           ...                             0   \n",
       "3                             NaN           ...                             0   \n",
       "4                             NaN           ...                             0   \n",
       "\n",
       "   not_enough_past_games_1  wins_past_2_games  not_enough_past_games_2  \\\n",
       "0                        1                  0                        1   \n",
       "1                        1                  0                        1   \n",
       "2                        1                  0                        1   \n",
       "3                        1                  0                        1   \n",
       "4                        1                  0                        1   \n",
       "\n",
       "   wins_past_3_games  not_enough_past_games_3  wins_past_4_games  \\\n",
       "0                  0                        1                  0   \n",
       "1                  0                        1                  0   \n",
       "2                  0                        1                  0   \n",
       "3                  0                        1                  0   \n",
       "4                  0                        1                  0   \n",
       "\n",
       "   not_enough_past_games_4  wins_past_5_games  not_enough_past_games_5  \n",
       "0                        1                  0                        1  \n",
       "1                        1                  0                        1  \n",
       "2                        1                  0                        1  \n",
       "3                        1                  0                        1  \n",
       "4                        1                  0                        1  \n",
       "\n",
       "[5 rows x 868 columns]"
      ]
     },
     "execution_count": 312,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "european_matches.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['_overall_rating',\n",
       " '_potential',\n",
       " '_preferred_foot',\n",
       " '_attacking_work_rate',\n",
       " '_defensive_work_rate',\n",
       " '_crossing',\n",
       " '_finishing',\n",
       " '_heading_accuracy',\n",
       " '_short_passing',\n",
       " '_volleys',\n",
       " '_dribbling',\n",
       " '_curve',\n",
       " '_free_kick_accuracy',\n",
       " '_long_passing',\n",
       " '_ball_control',\n",
       " '_acceleration',\n",
       " '_sprint_speed',\n",
       " '_agility',\n",
       " '_reactions',\n",
       " '_balance',\n",
       " '_shot_power',\n",
       " '_jumping',\n",
       " '_stamina',\n",
       " '_strength',\n",
       " '_long_shots',\n",
       " '_aggression',\n",
       " '_interceptions',\n",
       " '_positioning',\n",
       " '_vision',\n",
       " '_penalties',\n",
       " '_marking',\n",
       " '_standing_tackle',\n",
       " '_sliding_tackle']"
      ]
     },
     "execution_count": 313,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "player_columns = [column.split('11')[-1] for column in european_matches.columns if \"home_player_11\" in column \\\n",
    "                 and 'gk' not in column]\n",
    "player_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [],
   "source": [
    "def drop_columns_below_threshold(df, na_columns, threshold):\n",
    "    \"\"\"\n",
    "    Drop rows with too many NAs in specified columns. threshold is min number of columns we want to have non-NA values.\n",
    "    \"\"\"\n",
    "    df = df.copy()\n",
    "    #Keep rows with number of non-NA values above threshold in specified columns\n",
    "    keep_indices = df[na_columns].dropna(thresh = threshold).index\n",
    "    return df.loc[keep_indices]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {},
   "outputs": [],
   "source": [
    "home_rating_columns = ['home_player_{}_overall_rating'.format(i) for i in range(1, 12)]\n",
    "away_rating_columns = ['away_player_{}_overall_rating'.format(i) for i in range(1, 12)]\n",
    "\n",
    "\n",
    "european_matches = drop_columns_below_threshold(european_matches, home_rating_columns + away_rating_columns, 11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [],
   "source": [
    "diff_cols = []\n",
    "for player_column in player_columns:\n",
    "    home_cols = european_matches[['home_player_{}{}'.format(i, player_column) for i in range(2, 12)]].copy()\n",
    "    away_cols = european_matches[['away_player_{}{}'.format(i, player_column) for i in range(2, 12)]].copy()\n",
    "    #numeric column\n",
    "    if np.issubdtype(european_matches['home_player_11{}'.format(player_column)].dtype, np.number):\n",
    "        european_matches['home{}'.format(player_column)] = home_cols.mean(axis = 1)\n",
    "        european_matches['away{}'.format(player_column)] = away_cols.mean(axis = 1)\n",
    "        european_matches['diff{}'.format(player_column)] =  european_matches['home{}'.format(player_column)] - \\\n",
    "                                                            european_matches['away{}'.format(player_column)]\n",
    "        diff_cols.append('diff{}'.format(player_column))\n",
    "    #non-numeric column\n",
    "    else:\n",
    "        continue "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['diff_overall_rating',\n",
       " 'diff_potential',\n",
       " 'diff_crossing',\n",
       " 'diff_finishing',\n",
       " 'diff_heading_accuracy',\n",
       " 'diff_short_passing',\n",
       " 'diff_volleys',\n",
       " 'diff_dribbling',\n",
       " 'diff_curve',\n",
       " 'diff_free_kick_accuracy',\n",
       " 'diff_long_passing',\n",
       " 'diff_ball_control',\n",
       " 'diff_acceleration',\n",
       " 'diff_sprint_speed',\n",
       " 'diff_agility',\n",
       " 'diff_reactions',\n",
       " 'diff_balance',\n",
       " 'diff_shot_power',\n",
       " 'diff_jumping',\n",
       " 'diff_stamina',\n",
       " 'diff_strength',\n",
       " 'diff_long_shots',\n",
       " 'diff_aggression',\n",
       " 'diff_interceptions',\n",
       " 'diff_positioning',\n",
       " 'diff_vision',\n",
       " 'diff_penalties',\n",
       " 'diff_marking',\n",
       " 'diff_standing_tackle',\n",
       " 'diff_sliding_tackle']"
      ]
     },
     "execution_count": 317,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diff_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for label, df in european_matches.groupby('home_win'):\n",
    "    df.diff_potential.plot(kind=\"kde\", label=label)\n",
    "    plt.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 408,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['wins_past_1_games',\n",
       " 'not_enough_past_games_1',\n",
       " 'wins_past_2_games',\n",
       " 'not_enough_past_games_2',\n",
       " 'wins_past_3_games',\n",
       " 'not_enough_past_games_3',\n",
       " 'wins_past_4_games',\n",
       " 'not_enough_past_games_4',\n",
       " 'wins_past_5_games',\n",
       " 'not_enough_past_games_5']"
      ]
     },
     "execution_count": 408,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i in range(1, 6):\n",
    "    european_matches['diff_wins_past_{}_games'.format(i)] = (european_matches['home_wins_past_{}_games'.format(i)] -\\\n",
    "                                                             european_matches['away_wins_past_{}_games'.format(i)])\n",
    "    diff_cols.append('diff_wins_past_{}_games'.format(i))\n",
    "\n",
    "#https://stackoverflow.com/questions/952914/how-to-make-a-flat-list-out-of-list-of-lists\n",
    "past_wins_columns = [['wins_past_{}_games'.format(i), 'not_enough_past_games_{}'.format(i)] for i in range(1, 6)]\n",
    "past_wins_columns = [item for sublist in past_wins_columns for item in sublist]\n",
    "past_wins_columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 409,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['date', 'home_win', 'home_player_1_overall_rating',\n",
       "       'home_player_1_potential', 'home_player_1_preferred_foot',\n",
       "       'home_player_1_attacking_work_rate',\n",
       "       'home_player_1_defensive_work_rate', 'home_player_1_crossing',\n",
       "       'home_player_1_finishing', 'home_player_1_heading_accuracy',\n",
       "       ...\n",
       "       'away_standing_tackle', 'diff_standing_tackle', 'home_sliding_tackle',\n",
       "       'away_sliding_tackle', 'diff_sliding_tackle', 'diff_wins_past_1_games',\n",
       "       'diff_wins_past_2_games', 'diff_wins_past_3_games',\n",
       "       'diff_wins_past_4_games', 'diff_wins_past_5_games'],\n",
       "      dtype='object', length=963)"
      ]
     },
     "execution_count": 409,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "european_matches.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 410,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for label, df in european_matches.groupby('home_win'):\n",
    "    df.diff_wins_past_5_games.plot(kind=\"kde\", label=label)\n",
    "    plt.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 417,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "home_win\n",
       "0   -0.486096\n",
       "1    0.239902\n",
       "2   -0.142429\n",
       "Name: diff_wins_past_4_games, dtype: float64"
      ]
     },
     "execution_count": 417,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "european_matches.groupby('home_win')['diff_wins_past_4_games'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 412,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegressionCV\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.ensemble import AdaBoostClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.decomposition import PCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 413,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = european_matches['home_win'].values\n",
    "X = european_matches[diff_cols + past_wins_columns].values\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 414,
   "metadata": {},
   "outputs": [],
   "source": [
    "# lol = X_train._get_numeric_data().fillna(X_train._get_numeric_data().mean()).values\n",
    "# lol_pca = PCA().fit(lol)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 415,
   "metadata": {},
   "outputs": [],
   "source": [
    "# len(lol_pca.explained_variance_ratio_)\n",
    "# lol_pca.transform(lol)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 416,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.489464991742155\n",
      "0.49079263410728585\n"
     ]
    }
   ],
   "source": [
    "logit_model = LogisticRegressionCV(max_iter=1000, cv = 5, multi_class = 'multinomial').fit(X_train, y_train)\n",
    "print(logit_model.score(X_train, y_train))\n",
    "print(logit_model.score(X_val, y_val))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 394,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.47054701966868523\n",
      "0.4677742193755004\n"
     ]
    }
   ],
   "source": [
    "rf_model = RandomForestClassifier(n_estimators = 30).fit(X_train, y_train)\n",
    "print(rf_model.score(X_train, y_train))\n",
    "print(rf_model.score(X_val, y_val))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 395,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4703468294880136\n",
      "0.46657325860688553\n"
     ]
    }
   ],
   "source": [
    "ada_model = AdaBoostClassifier().fit(X_train, y_train)\n",
    "print(ada_model.score(X_train, y_train))\n",
    "print(ada_model.score(X_val, y_val))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
