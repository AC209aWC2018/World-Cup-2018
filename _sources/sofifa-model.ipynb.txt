{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.linear_model import LogisticRegressionCV\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
    "from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from predict_test_data import predict_test_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv('data/train_team.csv')\n",
    "test = pd.read_csv('data/test_team.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(2018)\n",
    "train, validation = train_test_split(train, test_size = 0.2)\n",
    "y_train = train['home_win'].ravel()\n",
    "X_train = train.drop('home_win', axis = 1)\n",
    "y_validation = validation.loc[:,'home_win'].ravel()\n",
    "X_validation = validation.drop(['home_win'], axis = 1)\n",
    "y_test = test['home_win'].ravel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "lr_model = LogisticRegressionCV(solver = 'lbfgs', max_iter = 5000, cv = 5, multi_class='multinomial').fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5147058823529411\n",
      "0.5146666666666667\n"
     ]
    }
   ],
   "source": [
    "print(lr_model.score(X_train, y_train))\n",
    "print(lr_model.score(X_validation, y_validation))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "lda_model = LinearDiscriminantAnalysis().fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.517379679144385\n",
      "0.528\n"
     ]
    }
   ],
   "source": [
    "print(lda_model.score(X_train, y_train))\n",
    "print(lda_model.score(X_validation, y_validation))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "qda_model = QuadraticDiscriminantAnalysis().fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5668449197860963\n",
      "0.43733333333333335\n"
     ]
    }
   ],
   "source": [
    "print(qda_model.score(X_train, y_train))\n",
    "print(qda_model.score(X_validation, y_validation))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf_model = RandomForestClassifier(min_samples_leaf = 20, n_estimators=100).fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6049465240641712\n",
      "0.5146666666666667\n"
     ]
    }
   ],
   "source": [
    "print(rf_model.score(X_train, y_train))\n",
    "print(rf_model.score(X_validation, y_validation))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.43716577540106955\n",
      "0.4613333333333333\n"
     ]
    }
   ],
   "source": [
    "print(accuracy_score(np.ones(len(y_train)), y_train))\n",
    "print(accuracy_score(np.ones(len(y_validation)), y_validation))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.26409419 0.29335991]]\n",
      "[[0.27344747 0.33659447]]\n",
      "[[0.12291911 0.27634627]]\n",
      "[[0.26183715 0.2873803 ]]\n",
      "[[0.18803981 0.28881251]]\n",
      "[[0.10543993 0.26620213]]\n",
      "[[0.30444117 0.30491284]]\n",
      "[[0.43038224 0.25068949]]\n",
      "[[0.3105627  0.31224456]]\n",
      "[[0.26380476 0.29569207]]\n",
      "[[0.4323178  0.28846051]]\n",
      "[[0.31696003 0.32665989]]\n",
      "[[0.27861549 0.32119866]]\n",
      "[[0.37527236 0.28398837]]\n",
      "[[0.2677672  0.28129988]]\n",
      "[[0.18995516 0.30400291]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.578125"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(test['home_win'], predict_test_data(test, X_train.columns, lr_model))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.26193838 0.28513938]]\n",
      "[[0.341426   0.29100992]]\n",
      "[[0.16645257 0.31103294]]\n",
      "[[0.2833266  0.31428305]]\n",
      "[[0.16597684 0.3345894 ]]\n",
      "[[0.12276437 0.31041295]]\n",
      "[[0.31318224 0.33079425]]\n",
      "[[0.41864757 0.28640271]]\n",
      "[[0.40763154 0.2818376 ]]\n",
      "[[0.22611581 0.3258044 ]]\n",
      "[[0.39434658 0.35404268]]\n",
      "[[0.27205659 0.34518796]]\n",
      "[[0.21755775 0.33853319]]\n",
      "[[0.37162753 0.33978203]]\n",
      "[[0.27370571 0.33585716]]\n",
      "[[0.14336507 0.31349678]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.5625"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(test['home_win'], predict_test_data(test, X_train.columns, lda_model))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.65673393 0.03972735]]\n",
      "[[0.33769414 0.37921008]]\n",
      "[[0.15889935 0.3684634 ]]\n",
      "[[0.3993393  0.45807545]]\n",
      "[[0.04428403 0.35613357]]\n",
      "[[0.22942285 0.16987229]]\n",
      "[[0.34736171 0.07347198]]\n",
      "[[0.55124318 0.32442576]]\n",
      "[[0.45777323 0.18995174]]\n",
      "[[0.07313897 0.49748952]]\n",
      "[[0.46640889 0.02456441]]\n",
      "[[0.28979214 0.4998115 ]]\n",
      "[[0.20977394 0.13343026]]\n",
      "[[0.46931124 0.31258836]]\n",
      "[[0.18905779 0.25439044]]\n",
      "[[0.39050028 0.15071203]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.46875"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(test['home_win'], predict_test_data(test, X_train.columns, qda_model))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.19990573 0.31661414]]\n",
      "[[0.31046801 0.36294215]]\n",
      "[[0.15080269 0.33115919]]\n",
      "[[0.19729153 0.32581477]]\n",
      "[[0.16380167 0.24197766]]\n",
      "[[0.11310393 0.24492373]]\n",
      "[[0.29040033 0.28701452]]\n",
      "[[0.42949788 0.28006843]]\n",
      "[[0.43730943 0.2515754 ]]\n",
      "[[0.27433375 0.26005043]]\n",
      "[[0.44802014 0.24399117]]\n",
      "[[0.28276635 0.38723018]]\n",
      "[[0.22324685 0.29753621]]\n",
      "[[0.3179384  0.31060451]]\n",
      "[[0.21173428 0.36230227]]\n",
      "[[0.19414093 0.33395531]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.5625"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(test['home_win'], predict_test_data(test, X_train.columns, rf_model))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.421875"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(np.ones(len(y_test)), y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
