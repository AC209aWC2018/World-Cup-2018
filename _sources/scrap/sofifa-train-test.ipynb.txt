{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import time\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>home_team</th>\n",
       "      <th>away_team</th>\n",
       "      <th>home_score</th>\n",
       "      <th>away_score</th>\n",
       "      <th>tournament</th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>neutral</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>31700</th>\n",
       "      <td>2010-01-02 00:00:00+00:00</td>\n",
       "      <td>Iran</td>\n",
       "      <td>Korea DPR</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>Doha</td>\n",
       "      <td>Qatar</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31701</th>\n",
       "      <td>2010-01-02 00:00:00+00:00</td>\n",
       "      <td>Qatar</td>\n",
       "      <td>Mali</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>Doha</td>\n",
       "      <td>Qatar</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31702</th>\n",
       "      <td>2010-01-02 00:00:00+00:00</td>\n",
       "      <td>Syria</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>Kuala Lumpur</td>\n",
       "      <td>Malaysia</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31703</th>\n",
       "      <td>2010-01-02 00:00:00+00:00</td>\n",
       "      <td>Yemen</td>\n",
       "      <td>Tajikistan</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>Sana'a</td>\n",
       "      <td>Yemen</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31704</th>\n",
       "      <td>2010-01-03 00:00:00+00:00</td>\n",
       "      <td>Angola</td>\n",
       "      <td>Gambia</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>Vila Real de Santo António</td>\n",
       "      <td>Portugal</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           date home_team   away_team  home_score  away_score  \\\n",
       "31700 2010-01-02 00:00:00+00:00      Iran   Korea DPR           1           0   \n",
       "31701 2010-01-02 00:00:00+00:00     Qatar        Mali           0           0   \n",
       "31702 2010-01-02 00:00:00+00:00     Syria    Zimbabwe           6           0   \n",
       "31703 2010-01-02 00:00:00+00:00     Yemen  Tajikistan           0           1   \n",
       "31704 2010-01-03 00:00:00+00:00    Angola      Gambia           1           1   \n",
       "\n",
       "      tournament                        city   country  neutral  \n",
       "31700   Friendly                        Doha     Qatar     True  \n",
       "31701   Friendly                        Doha     Qatar    False  \n",
       "31702   Friendly                Kuala Lumpur  Malaysia     True  \n",
       "31703   Friendly                      Sana'a     Yemen    False  \n",
       "31704   Friendly  Vila Real de Santo António  Portugal     True  "
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = pd.read_csv('data/fifa/international_results.csv')\n",
    "results['date'] = pd.to_datetime(results['date'], utc=True)\n",
    "\n",
    "# restrict dates\n",
    "earliest_date = '2010-01-01'\n",
    "latest_date = '2018-06-14'\n",
    "results = results[(results['date'] > earliest_date) & (results['date'] < latest_date)]\n",
    "results.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>team</th>\n",
       "      <th>date</th>\n",
       "      <th>overall</th>\n",
       "      <th>attack</th>\n",
       "      <th>midfield</th>\n",
       "      <th>defence</th>\n",
       "      <th>prestige</th>\n",
       "      <th>start_age</th>\n",
       "      <th>full_age</th>\n",
       "      <th>bup_speed</th>\n",
       "      <th>...</th>\n",
       "      <th>cc_passing</th>\n",
       "      <th>cc_crossing</th>\n",
       "      <th>cc_shooting</th>\n",
       "      <th>d_pressure</th>\n",
       "      <th>d_aggresion</th>\n",
       "      <th>d_width</th>\n",
       "      <th>wage_euros_thousands</th>\n",
       "      <th>value_euros_millions</th>\n",
       "      <th>growth</th>\n",
       "      <th>goalkeeeper_overall</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>2018-06-11</td>\n",
       "      <td>85.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>26.73</td>\n",
       "      <td>27.09</td>\n",
       "      <td>51.0</td>\n",
       "      <td>...</td>\n",
       "      <td>39.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>123.608696</td>\n",
       "      <td>32.5</td>\n",
       "      <td>1.826087</td>\n",
       "      <td>84.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>2018-06-07</td>\n",
       "      <td>85.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>26.73</td>\n",
       "      <td>27.09</td>\n",
       "      <td>51.0</td>\n",
       "      <td>...</td>\n",
       "      <td>39.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>123.608696</td>\n",
       "      <td>32.5</td>\n",
       "      <td>1.826087</td>\n",
       "      <td>84.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>2018-06-04</td>\n",
       "      <td>85.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>26.73</td>\n",
       "      <td>27.09</td>\n",
       "      <td>51.0</td>\n",
       "      <td>...</td>\n",
       "      <td>39.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>123.608696</td>\n",
       "      <td>32.5</td>\n",
       "      <td>1.826087</td>\n",
       "      <td>84.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>2018-05-31</td>\n",
       "      <td>85.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>26.73</td>\n",
       "      <td>27.09</td>\n",
       "      <td>51.0</td>\n",
       "      <td>...</td>\n",
       "      <td>39.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>123.608696</td>\n",
       "      <td>32.5</td>\n",
       "      <td>1.826087</td>\n",
       "      <td>84.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>Brazil</td>\n",
       "      <td>2018-05-28</td>\n",
       "      <td>85.0</td>\n",
       "      <td>86.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>26.73</td>\n",
       "      <td>27.09</td>\n",
       "      <td>51.0</td>\n",
       "      <td>...</td>\n",
       "      <td>39.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>76.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>63.0</td>\n",
       "      <td>123.608696</td>\n",
       "      <td>32.5</td>\n",
       "      <td>1.826087</td>\n",
       "      <td>84.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      team       date  overall  attack  midfield  defence  prestige  \\\n",
       "48  Brazil 2018-06-11     85.0    86.0      83.0     85.0      10.0   \n",
       "49  Brazil 2018-06-07     85.0    86.0      83.0     85.0      10.0   \n",
       "50  Brazil 2018-06-04     85.0    86.0      83.0     85.0      10.0   \n",
       "51  Brazil 2018-05-31     85.0    86.0      83.0     85.0      10.0   \n",
       "52  Brazil 2018-05-28     85.0    86.0      83.0     85.0      10.0   \n",
       "\n",
       "    start_age  full_age  bup_speed         ...           cc_passing  \\\n",
       "48      26.73     27.09       51.0         ...                 39.0   \n",
       "49      26.73     27.09       51.0         ...                 39.0   \n",
       "50      26.73     27.09       51.0         ...                 39.0   \n",
       "51      26.73     27.09       51.0         ...                 39.0   \n",
       "52      26.73     27.09       51.0         ...                 39.0   \n",
       "\n",
       "    cc_crossing  cc_shooting  d_pressure  d_aggresion  d_width  \\\n",
       "48         33.0         67.0        76.0         73.0     63.0   \n",
       "49         33.0         67.0        76.0         73.0     63.0   \n",
       "50         33.0         67.0        76.0         73.0     63.0   \n",
       "51         33.0         67.0        76.0         73.0     63.0   \n",
       "52         33.0         67.0        76.0         73.0     63.0   \n",
       "\n",
       "    wage_euros_thousands  value_euros_millions    growth  goalkeeeper_overall  \n",
       "48            123.608696                  32.5  1.826087                 84.0  \n",
       "49            123.608696                  32.5  1.826087                 84.0  \n",
       "50            123.608696                  32.5  1.826087                 84.0  \n",
       "51            123.608696                  32.5  1.826087                 84.0  \n",
       "52            123.608696                  32.5  1.826087                 84.0  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ratings = pd.read_csv('data/sofifa_final.csv')\n",
    "ratings['date'] = pd.to_datetime(ratings['date'])\n",
    "\n",
    "# restrict dates\n",
    "# note that we use a different earliest data here to ensure \n",
    "# that our earliest match data has a matching ratings data\n",
    "ratings = ratings[(ratings['date'] > '2009-08-29') & (ratings['date'] < latest_date)]\n",
    "ratings.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now have to find the closest match in date between our FIFA team ratings and the match data that we have."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "dates = pd.Series(ratings.date.unique())\n",
    "teams = ratings.team.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cannot Find Republic of Ireland\n",
      "Cannot Find United States\n",
      "Cannot Find China PR\n",
      "Cannot Find Côte d'Ivoire\n",
      "Cannot Find Republic of Ireland\n",
      "Cannot Find United States\n",
      "Cannot Find China PR\n",
      "Cannot Find Côte d'Ivoire\n"
     ]
    }
   ],
   "source": [
    "# check that we found the corresponding team from team ratings in results\n",
    "for t in teams:\n",
    "    try:\n",
    "        assert np.sum(results.home_team.unique() == t) == 1\n",
    "    except:\n",
    "        print('Cannot Find {}'.format(t))\n",
    "\n",
    "for t in teams:\n",
    "    try:\n",
    "        assert np.sum(results.away_team.unique() == t) == 1\n",
    "    except:\n",
    "        print('Cannot Find {}'.format(t))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before we proceed with anything else, let's check that country names are spelled similarly. We find that 'Republic of Ireland', 'United States', 'China PR', and 'Côte d'Ivoire' might be spelled differently."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "ratings.replace('Republic of Ireland', 'Ireland', inplace=True)\n",
    "ratings.replace('United States', 'USA', inplace=True)\n",
    "ratings.replace('China PR', 'China', inplace=True)\n",
    "ratings.replace(\"Côte d'Ivoire\", 'Ivory Coast', inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we finally have two datasets of teams spelled in the same way."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# find closest date that we have data on\n",
    "def get_latest_date(match_date, dates):\n",
    "    match_date = match_date.to_datetime64()\n",
    "    return dates[match_date >  dates].max()\n",
    "\n",
    "# results['closest_date'] = results.apply(lambda i: min(dates, key=lambda d: abs(d-i.date)), axis=1)\n",
    "results['closest_date'] = results['date'].apply(get_latest_date, dates = dates)\n",
    "results.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have the closest matching data for both of our datasets, we can merge on team and date. Note that we have merge twice in order to account for both teams in the results table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# merge home team with their closest ratings\n",
    "results_ratings1 = results.merge(ratings, how='inner', \n",
    "                                left_on=['closest_date', 'home_team'],\n",
    "                                right_on=['date', 'team'])\n",
    "\n",
    "results_ratings2 = results_ratings1.merge(ratings, how='inner',\n",
    "                                       left_on=['closest_date', 'away_team'],\n",
    "                                       right_on=['date', 'team'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "results_ratings2.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We find that we have 1171 observations that can still be used after matching team ratings with the results dataframe with an inner merge. We now clean up the merged dataframe slightly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# response variable\n",
    "score_diff = results_ratings2['home_score'] - results_ratings2['away_score']\n",
    "results_ratings2['home_win'] = [0 if score < 0 else 1 if score > 0 else 2 for score in score_diff]\n",
    "\n",
    "# drop useless columns\n",
    "results_ratings2.drop(['home_team', 'away_team', 'tournament', \n",
    "                       'city', 'country', 'neutral', 'closest_date',\n",
    "                      'team_x', 'date_y', 'team_y', 'date',\n",
    "                      'home_score', 'away_score', 'date_x'], axis=1, inplace=True)\n",
    "\n",
    "# reorder columns\n",
    "results_ratings2.sort_index(axis=1, inplace=True)\n",
    "results_ratings2.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our final training data is basically a difference in the various team ratings. Now let's clean up the dataframe for our training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ratings_base = results_ratings2.loc[:,['home_win']]\n",
    "ratings_base.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "diff_ratings = results_ratings2.drop('home_win', axis=1)\n",
    "diff_ratings = diff_ratings.diff(axis=1)\n",
    "ncol = diff_ratings.shape[1]\n",
    "\n",
    "# we only want every alternate column\n",
    "diff_ratings = diff_ratings.iloc[:,list(np.arange(1,ncol, 2))]\n",
    "\n",
    "# we want our statistics to be from perspective of home team\n",
    "diff_ratings = diff_ratings*-1\n",
    "diff_ratings.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "columns = ['attack_diff', 'bup_dribbling_diff', 'bup_passing_diff', 'bup_speed_diff',\n",
    "          'cc_crossing_diff', 'cc_passing_diff', 'cc_shooting_diff', 'd_aggresion_diff',\n",
    "          'd_pressure_diff', 'd_width_diff', 'defence_diff', 'full_age_diff', \n",
    "          'goalkeeper_overall_diff', 'growth_diff', 'midfield_diff', 'overall_diff',\n",
    "          'prestige_diff', 'start_age_diff', 'avg_value_euros_millions_diff',\n",
    "          'avg_wage_euros_thousands_diff']\n",
    "\n",
    "diff_ratings.columns = columns\n",
    "\n",
    "# compile datframe\n",
    "train = pd.concat([ratings_base, diff_ratings], axis=1)\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(train[train.avg_wage_euros_thousands_diff == 0].shape)\n",
    "print(train[train.avg_value_euros_millions_diff == 0].shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Importantly, we note that 558 out of our 1171 observations have missing wage and value data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# save to csv\n",
    "train.to_csv('data/train_team.csv', index = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now create our test set with actual world cup data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'pd' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-3-a6ec6be62dc6>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mratings_wc\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'data/sofifa_final.csv'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[0mratings_wc\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'date'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mto_datetime\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mratings_wc\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'date'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mutc\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;31m# restrict dates\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mlatest_date\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m'2018-06-14'\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'pd' is not defined"
     ]
    }
   ],
   "source": [
    "ratings_wc = pd.read_csv('data/sofifa_final.csv')\n",
    "ratings_wc['date'] = pd.to_datetime(ratings_wc['date'], utc=True)\n",
    "\n",
    "# restrict dates\n",
    "latest_date = '2018-06-14'\n",
    "wc_pre = '2018-06-14' # pre WC rating for values and wages\n",
    "wc_start = '2018-06-16' # first WC rating\n",
    "wc_end = '2018-07-15'\n",
    "\n",
    "# get values and wages data\n",
    "wage = ratings_wc.loc[ratings_wc['date'] == wc_pre, 'wage_euros_thousands']\n",
    "value = ratings_wc.loc[ratings_wc['date'] == wc_pre, 'value_euros_millions']\n",
    "\n",
    "# restrict dates\n",
    "ratings_wc = ratings_wc[(ratings_wc['date'] >= wc_start) & (ratings_wc['date'] <= wc_end)]\n",
    "\n",
    "# replace values and wage data\n",
    "ratings_wc['wage_euros_thousands'] = wage.reset_index(drop=True)\n",
    "ratings_wc['value_euros_millions'] = value.reset_index(drop=True)\n",
    "\n",
    "ratings_wc.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dates_wc = ratings_wc.date.unique()\n",
    "teams_wc = ratings_wc.team.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#https://gitlab.com/djh_or/2018-world-cup-stats/blob/master/world_cup_2018_stats.csv\n",
    "results_wc = pd.read_csv(\"data/world_cup_2018_stats.csv\")\n",
    "results_wc.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before we proceed, let's ensure that our country names match up similarly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# check that we found the corresponding team from team ratings in results\n",
    "# but now we reverse it such that we try to find a rating for each wc team\n",
    "for t in results_wc.Team.unique():\n",
    "    try:\n",
    "        assert np.sum(teams_wc == t) == 1\n",
    "    except:\n",
    "        print('Cannot Find {}'.format(t))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ratings_wc.replace('Iran', 'IR Iran', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "results_wc = results_wc.loc[:,['Team', 'Opponent', 'WDL']]\n",
    "results_wc['home_win'] = [0 if score == 'L' else 1 if score == 'W' else 2 for score in results_wc.WDL]\n",
    "results_wc.drop('WDL', axis=1, inplace=True)\n",
    "\n",
    "# we only want every alternate column\n",
    "results_wc = results_wc.iloc[list(np.arange(0, results_wc.shape[0], 2)),:]\n",
    "\n",
    "results_wc.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can match the ratings data to our test dataset as well. We note that there might be some value in using the updated FIFA ratings at each time of the match. However, for simplicity, let's just assume that teams have the same rating throughout the tournament. We will take the rating at the start of the tournament."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ratings_wc_start = ratings_wc[ratings_wc['date'] == wc_start]\n",
    "\n",
    "# merge ratings with results table\n",
    "results_ratings_wc1 = results_wc.merge(ratings_wc_start, how='left',\n",
    "                                     left_on='Team', right_on='team')\n",
    "results_ratings_wc2 = results_ratings_wc1.merge(ratings_wc_start, how='left',\n",
    "                                             left_on='Opponent', right_on='team')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# check that every team has a rating\n",
    "assert results_ratings_wc2.shape[0] == results_wc.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop useless columns\n",
    "results_ratings_wc2.drop(['Team', 'Opponent', 'team_x', 'team_y', 'date_y', 'date_x'], \n",
    "                         axis=1, inplace=True)\n",
    "\n",
    "# reorder columns\n",
    "results_ratings_wc2.sort_index(axis=1, inplace=True)\n",
    "results_ratings_wc2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "ratings_base_wc = results_ratings_wc2.loc[:,['home_win']]\n",
    "ratings_base_wc.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "diff_ratings_wc = results_ratings_wc2.drop('home_win', axis=1)\n",
    "diff_ratings_wc = diff_ratings_wc.diff(axis=1)\n",
    "ncol_wc = diff_ratings_wc.shape[1]\n",
    "\n",
    "# we only want every alternate column\n",
    "diff_ratings_wc = diff_ratings_wc.iloc[:,list(np.arange(1,ncol_wc, 2))]\n",
    "\n",
    "# we want our statistics to be from perspective of home teams\n",
    "diff_ratings_wc = diff_ratings_wc*-1\n",
    "diff_ratings_wc.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "diff_ratings_wc.columns = columns\n",
    "\n",
    "# compile datframe\n",
    "test = pd.concat([ratings_base_wc, diff_ratings_wc], axis=1)\n",
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# save to csv\n",
    "test.to_csv('data/test_team.csv', index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
